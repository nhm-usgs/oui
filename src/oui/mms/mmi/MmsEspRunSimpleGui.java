/*
 * MmsInputDataFromDssGui.java
 *
 * Created on June 22, 2004, 3:43 PM
 */

package oui.mms.mmi;

import gov.usgs.cawsc.gui.MenuBarProvider;
import gov.usgs.cawsc.gui.WindowFactory;
import java.util.Calendar;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.SpinnerModel;
import oui.mms.datatypes.OuiCalendar;

/**
 *
 * @author  markstro
 */
public class MmsEspRunSimpleGui extends JPanel implements MenuBarProvider {
    private MmsEspModelRunner srm;

    /** Creates new form MmsInputDataFromDssGui */
    public MmsEspRunSimpleGui(String mmsDataFileName, OuiCalendar data_file_start, OuiCalendar data_file_end, MmsEspModelRunner srm) {
        this(mmsDataFileName, data_file_start, data_file_end, null, srm);
    }

    public MmsEspRunSimpleGui(String mmsDataFileName, OuiCalendar data_file_start, OuiCalendar data_file_end, OuiCalendar state_date, MmsEspModelRunner srm) {
        this.srm = srm;
        initComponents();

        mmsDataFileLable.setText("MMS Input Data File: " + mmsDataFileName);
        dateLabel.setText("(has data from " + data_file_start.getSQLDate() + " to " + data_file_end.getSQLDate() + ")");

        /*
         *  Set the default start date to one day past the last day of the data file
         */
        queryStart = (OuiCalendar)(data_file_end.clone());
        queryStart.setJulian(queryStart.getJulian() + 1.0);

        /*
         * Set the default end date to Dec 31
         */
        queryEnd = new OuiCalendar ();
        queryEnd.set(queryStart.get (Calendar.YEAR), 11, 31, 0, 0, 0);

        /*
         * Set the end limit of the forecast to one year after the end of the data file
         */
        OuiCalendar foo = (OuiCalendar)(data_file_end.clone());
        foo.setJulian(data_file_start.getJulian() + 730.0);

        try {
            startSpinner.setModel(new SpinnerDateModel(queryStart.getTime(), foo.getTime(), queryStart.getTime(), Calendar.DAY_OF_MONTH));
            startSpinner.setEditor(new JSpinner.DateEditor(startSpinner, "yyyy-MM-dd"));
        } catch (IllegalArgumentException ex) {
            System.out.println("oui.mms.mmi.MmsEspRunSimpleGui: problem with " + mmsDataFileName);
            System.out.println("   spinner start value: " + queryStart.getTime() + " start time: " + foo.getTime() + " end time: " + queryStart.getTime());

        }

        foo.setJulian(data_file_end.getJulian() + 365.0);
        try {
            endSpinner.setModel(new SpinnerDateModel(queryEnd.getTime(), data_file_start.getTime(), foo.getTime(), Calendar.DAY_OF_MONTH));
            endSpinner.setEditor(new JSpinner.DateEditor(endSpinner, "yyyy-MM-dd"));
        } catch (IllegalArgumentException ex) {
            System.out.println("oui.mms.mmi.MmsEspRunSimpleGui: problem with " + mmsDataFileName);
            System.out.println("   spinner end value: " + queryEnd.getTime() + " start time: " + data_file_start.getTime() + " end time: " +  foo.getTime());
        }


        this.setSize(this.getPreferredSize());
    }

    public JMenuBar getMenuBar() {
        return jMenuBar1;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        exit_menu_item = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        mmsDataFileLable = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        startSpinner = new javax.swing.JSpinner();
        endSpinner = new javax.swing.JSpinner();

        jMenuBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jMenu1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jMenu1.setText("File");

        exit_menu_item.setText("Exit");
        exit_menu_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonPushed(evt);
            }
        });
        jMenu1.add(exit_menu_item);

        jMenuBar1.add(jMenu1);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        mmsDataFileLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mmsDataFileLable.setText("MMS Input Data File:");

        dateLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        dateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dateLabel.setText("(has data from ....)");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Forecast Start Date:");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Forecast End Date:");

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonPushed(evt);
            }
        });

        startSpinner.setName("startSpinner"); // NOI18N
        startSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startSpinnerChange(evt);
            }
        });

        endSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                endSpinnerChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(runButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(mmsDataFileLable, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(endSpinner)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(mmsDataFileLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(startSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(endSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jMenuBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jMenuBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonPushed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonPushed
        if (srm != null) {
            srm.runModel (queryStart, queryEnd);
        } else {
            System.out.println ("run button pushed");
        }
    }//GEN-LAST:event_runButtonPushed

    private void endSpinnerChange(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_endSpinnerChange
        SpinnerModel dateModel = endSpinner.getModel();
        if (dateModel instanceof SpinnerDateModel) {
            queryEnd.setTime(((SpinnerDateModel)dateModel).getDate());
        }
    }//GEN-LAST:event_endSpinnerChange

    private void startSpinnerChange(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startSpinnerChange
        SpinnerModel dateModel = startSpinner.getModel();
        if (dateModel instanceof SpinnerDateModel) {
            queryStart.setTime(((SpinnerDateModel)dateModel).getDate());
        }
    }//GEN-LAST:event_startSpinnerChange

    private void exitButtonPushed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonPushed
        WindowFactory.instance().closeWindow(this);
    }//GEN-LAST:event_exitButtonPushed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        WindowFactory.instance().closeWindow(this);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        MmsRunSimpleGui gui = new MmsRunSimpleGui("mmsDataFileName", null, null, null);
        WindowFactory.displayInFrame(gui, "Run MMS Model");
    }

    /**
     * Getter for property queryEnd.
     * @return Value of property queryEnd.
     */
    public OuiCalendar getQueryEnd() {
        return this.queryEnd;
    }

    /**
     * Setter for property queryEnd.
     * @param queryEnd New value of property queryEnd.
     */
    public void setQueryEnd(OuiCalendar queryEnd) {
        this.queryEnd = queryEnd;
    }

    /**
     * Getter for property queryStart.
     * @return Value of property queryStart.
     */
    public OuiCalendar getQueryStart() {
        return this.queryStart;
    }

    /**
     * Setter for property queryStart.
     * @param queryStart New value of property queryStart.
     */
    public void setQueryStart(OuiCalendar queryStart) {
        this.queryStart = queryStart;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dateLabel;
    private javax.swing.JSpinner endSpinner;
    private javax.swing.JMenuItem exit_menu_item;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel mmsDataFileLable;
    private javax.swing.JButton runButton;
    private javax.swing.JSpinner startSpinner;
    // End of variables declaration//GEN-END:variables

    /**
     * Holds value of property queryEnd.
     */
    private OuiCalendar queryEnd;

    /**
     * Holds value of property queryStart.
     */
    private OuiCalendar queryStart;

}
