/*
 * MmsGui.java
 *
 * Created on May 10, 2005, 4:39 PM
 */

package oui.mms.gui;

import gov.usgs.cawsc.gui.GuiUtilities;
import gov.usgs.cawsc.gui.MenuBarProvider;
import gov.usgs.cawsc.gui.PersistentSplitterTracker;
import gov.usgs.cawsc.gui.WindowFactory;
import java.io.BufferedReader;
import java.io.File;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.netbeans.lib.awtextra.AbsoluteLayout;
import oui.mms.datatypes.ControlSet;
import oui.mms.datatypes.ParameterSet;
import oui.paramtool.ParamTool;
//import oui.sce.gui.SCEWizardFrame;
import oui.util.OuiHelp;

/**
 *
 * @author  markstro
 */
public class MmsGui extends JPanel implements MenuBarProvider {
    private Mms mms;
    private DefaultListModel dataFileListModel;
    private MmsSchemPanel schemPanel;

    protected PersistentSplitterTracker persistentSplitterTracker = null;

    /** Creates new form MmsGui */
    public MmsGui(Mms mms) {
        this.mms = mms;
        initComponents();

        modelLabel.setText(mms.getSingleControlValue("executable_model"));
        modelDescLabel.setText(mms.getSingleControlValue("executable_desc"));

        dataFileListModel = new DefaultListModel();
        dataFileList.setModel(dataFileListModel);

        setDataFile();

        boolean foo = isThereAnOldSchematicFile();
        if (foo) {
            loadSchemFile();
        } else {
            loadTreeTable();
        }

        setSize(getPreferredSize());
        
        persistentSplitterTracker = new PersistentSplitterTracker(this, jSplitPane1);
    }

    public JMenuBar getMenuBar() {
        return jMenuBar1;
    }

    public void loadTreeTable() {
        jSplitPane1.setRightComponent(new MmsTreeTablePanel(mms));
    }

    public void loadSchemFile() {
//        System.out.println("MmsGui:loadSchemFile  Everything is commented out until I figure out the schem file format");
        schemPanel = new MmsSchemPanel(mms);
        schemPanel.setLayout(new AbsoluteLayout());
        schemScrollPane.setViewportView(schemPanel);
        schemPanel.draw();
    }

    public void setControlFile(ControlSet cs) {
        controlNameLabel.setText(cs.getFileName());
        controlDescriptionLabel.setText(cs.getDescription());
    }

//    public void setEnvFile(String fName, String desc) {
//        envNameLabel.setText(fName);
//        envDescriptionLabel.setText(desc);
//    }

//    public void setParamFile(String fName, String desc) {
//        updateParamFileLabelGui(fName, desc);
//    }

    void updateParamFileLabelGui(ParameterSet ps) {
        paramNameLabel.setText(ps.getFileName());
        paramDescriptionLabel.setText(ps.getDescription());
    }

    public void updateDataFileListGui() {
        dataFileListModel.removeAllElements();
        ArrayList<String> dataFiles = mms.getControlValues("data_file");
        for (int i = 0; i < dataFiles.size(); i++) {
            dataFileListModel.addElement(dataFiles.get(i));
        }
    }

    public void setDataFile() {
        updateDataFileListGui();
        mms.loadVariableFiles();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadDataMenuItem = new javax.swing.JMenuItem();
        loadParamsMenuItem = new javax.swing.JMenuItem();
        loadControlMenuItem = new javax.swing.JMenuItem();
        modelMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        saveParamsMenuItem = new javax.swing.JMenuItem();
        saveControlMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        fileNamesMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMwnu = new javax.swing.JMenu();
        editParamMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        paramInfoMenuItem = new javax.swing.JMenuItem();
        controlInfoMenuItem = new javax.swing.JMenuItem();
        modelInfoMenuItem = new javax.swing.JMenuItem();
        runMenu = new javax.swing.JMenu();
        singleRunMenuItem = new javax.swing.JMenuItem();
        sensMenu = new javax.swing.JMenu();
        sensMenuItem = new javax.swing.JMenuItem();
        prmsSensMenuItem = new javax.swing.JMenuItem();
        optMenu = new javax.swing.JMenu();
        hyperMenuItem = new javax.swing.JMenuItem();
        rosOptMenuItem = new javax.swing.JMenuItem();
        sceOptMenuItem = new javax.swing.JMenuItem();
        espMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        manualHelp = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        controlScrollPane = new javax.swing.JScrollPane();
        infoPanel = new javax.swing.JPanel();
        modelPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        modelLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        modelDescLabel = new javax.swing.JLabel();
        controlPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        controlNameLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        controlDescriptionLabel = new javax.swing.JLabel();
        paramPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        paramNameLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        paramDescriptionLabel = new javax.swing.JLabel();
        dataPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataFileList = new javax.swing.JList();
        schemScrollPane = new javax.swing.JScrollPane();

        fileMenu.setText("File");

        loadDataMenuItem.setText("Load Data Files");
        loadDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadDataMenuItem);

        loadParamsMenuItem.setText("Load Parameters");
        loadParamsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadParamsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadParamsMenuItem);

        loadControlMenuItem.setText("Load Control File");
        loadControlMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadControlMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadControlMenuItem);

        modelMenuItem.setText("Set Model");
        modelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(modelMenuItem);
        fileMenu.add(jSeparator1);

        saveParamsMenuItem.setText("Save Parameters");
        saveParamsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveParamsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveParamsMenuItem);

        saveControlMenuItem.setText("Save Control");
        saveControlMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveControlMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveControlMenuItem);
        fileMenu.add(jSeparator2);

        fileNamesMenuItem.setText("Set File Names");
        fileNamesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNamesMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileNamesMenuItem);
        fileMenu.add(jSeparator3);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        editMwnu.setText("Edit");

        editParamMenuItem.setText("Parameters & Dimensions");
        editParamMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editParamMenuItemActionPerformed(evt);
            }
        });
        editMwnu.add(editParamMenuItem);
        editMwnu.add(jSeparator5);

        paramInfoMenuItem.setText("Parameter Info");
        paramInfoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paramInfoMenuItemActionPerformed(evt);
            }
        });
        editMwnu.add(paramInfoMenuItem);

        controlInfoMenuItem.setText("Control Info");
        controlInfoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlInfoMenuItemActionPerformed(evt);
            }
        });
        editMwnu.add(controlInfoMenuItem);

        modelInfoMenuItem.setText("Model Info");
        modelInfoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelInfoMenuItemActionPerformed(evt);
            }
        });
        editMwnu.add(modelInfoMenuItem);

        jMenuBar1.add(editMwnu);

        runMenu.setText("Run");

        singleRunMenuItem.setText("Single Run");
        singleRunMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleRunMenuItemActionPerformed(evt);
            }
        });
        runMenu.add(singleRunMenuItem);

        sensMenu.setText("Sensitivity");

        sensMenuItem.setText("Sensitivity");
        sensMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sensMenuItemActionPerformed(evt);
            }
        });
        sensMenu.add(sensMenuItem);

        prmsSensMenuItem.setText("PRMS Sensitivity");
        prmsSensMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prmsSensMenuItemActionPerformed(evt);
            }
        });
        sensMenu.add(prmsSensMenuItem);

        runMenu.add(sensMenu);

        optMenu.setText("Optimization");

        hyperMenuItem.setText("Hyper-tunnel");
        hyperMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hyperMenuItemActionPerformed(evt);
            }
        });
        optMenu.add(hyperMenuItem);

        rosOptMenuItem.setText("Rosenbrock");
        rosOptMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rosOptMenuItemActionPerformed(evt);
            }
        });
        optMenu.add(rosOptMenuItem);

        sceOptMenuItem.setText("SCE");
        sceOptMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sceOptMenuItemActionPerformed(evt);
            }
        });
        optMenu.add(sceOptMenuItem);

        runMenu.add(optMenu);

        espMenuItem.setText("ESP");
        espMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espMenuItemActionPerformed(evt);
            }
        });
        runMenu.add(espMenuItem);

        jMenuBar1.add(runMenu);

        helpMenu.setText("Help");

        manualHelp.setText("MMS Users Manual");
        manualHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualHelpActionPerformed(evt);
            }
        });
        helpMenu.add(manualHelp);

        jMenuBar1.add(helpMenu);

        jSplitPane1.setResizeWeight(0.333);

        infoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        infoPanel.setLayout(new javax.swing.BoxLayout(infoPanel, javax.swing.BoxLayout.Y_AXIS));

        modelPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        modelPanel.setLayout(new java.awt.BorderLayout());

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Model Information");
        jLabel4.setBackground(new java.awt.Color(153, 0, 204));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setOpaque(true);
        modelPanel.add(jLabel4, java.awt.BorderLayout.NORTH);

        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.Y_AXIS));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Name:");
        jPanel7.add(jLabel5);
        jPanel7.add(modelLabel);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Description:");
        jLabel6.setToolTipText("");
        jPanel7.add(jLabel6);

        modelDescLabel.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                modelDescLabelPropertyChange(evt);
            }
        });
        jPanel7.add(modelDescLabel);

        modelPanel.add(jPanel7, java.awt.BorderLayout.CENTER);

        infoPanel.add(modelPanel);

        controlPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        controlPanel.setLayout(new java.awt.BorderLayout());

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Control Information");
        jLabel7.setBackground(new java.awt.Color(153, 0, 204));
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setOpaque(true);
        controlPanel.add(jLabel7, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Name:");
        jPanel1.add(jLabel8);
        jPanel1.add(controlNameLabel);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Description:");
        jPanel1.add(jLabel9);

        controlDescriptionLabel.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                controlDescriptionLabelPropertyChange(evt);
            }
        });
        jPanel1.add(controlDescriptionLabel);

        controlPanel.add(jPanel1, java.awt.BorderLayout.CENTER);

        infoPanel.add(controlPanel);

        paramPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        paramPanel.setLayout(new java.awt.BorderLayout());

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Parameter Information");
        jLabel10.setBackground(new java.awt.Color(153, 0, 204));
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setOpaque(true);
        paramPanel.add(jLabel10, java.awt.BorderLayout.NORTH);

        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.Y_AXIS));

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Name:");
        jPanel8.add(jLabel11);
        jPanel8.add(paramNameLabel);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Description:");
        jPanel8.add(jLabel12);

        paramDescriptionLabel.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                paramDescriptionLabelPropertyChange(evt);
            }
        });
        jPanel8.add(paramDescriptionLabel);

        paramPanel.add(jPanel8, java.awt.BorderLayout.CENTER);

        infoPanel.add(paramPanel);

        dataPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dataPanel.setLayout(new java.awt.BorderLayout());

        jLabel13.setBackground(new java.awt.Color(153, 0, 204));
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Data Information");
        jLabel13.setOpaque(true);
        dataPanel.add(jLabel13, java.awt.BorderLayout.NORTH);
        dataPanel.add(jScrollPane1, java.awt.BorderLayout.SOUTH);

        dataFileList.setOpaque(false);
        dataPanel.add(dataFileList, java.awt.BorderLayout.CENTER);

        infoPanel.add(dataPanel);

        controlScrollPane.setViewportView(infoPanel);

        jSplitPane1.setLeftComponent(controlScrollPane);
        jSplitPane1.setRightComponent(schemScrollPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jMenuBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jMenuBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rosOptMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rosOptMenuItemActionPerformed
        JOptionPane.showMessageDialog(GuiUtilities.windowFor(this), "Sorry, not implemented yet!", "MMS", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_rosOptMenuItemActionPerformed

    private void hyperMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hyperMenuItemActionPerformed
        JOptionPane.showMessageDialog(GuiUtilities.windowFor(this), "Sorry, not implemented yet!", "MMS", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_hyperMenuItemActionPerformed

    private void prmsSensMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prmsSensMenuItemActionPerformed
        JOptionPane.showMessageDialog(GuiUtilities.windowFor(this), "Sorry, not implemented yet!", "MMS", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_prmsSensMenuItemActionPerformed

    private void sensMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensMenuItemActionPerformed
        JOptionPane.showMessageDialog(GuiUtilities.windowFor(this), "Sorry, not implemented yet!", "MMS", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_sensMenuItemActionPerformed

    private void espMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espMenuItemActionPerformed
//        new MmsEspRunGui(mms).setVisible(true);
        JOptionPane.showMessageDialog(GuiUtilities.windowFor(this), "Sorry, not implemented yet!", "MMS", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_espMenuItemActionPerformed

    private void singleRunMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleRunMenuItemActionPerformed
        MmsSingleRunGui msrg = new MmsSingleRunGui(mms);        
        String title = "MMS Run Control - Single Run";
        WindowFactory.displayInFrame(msrg, title);
    }//GEN-LAST:event_singleRunMenuItemActionPerformed

    private void sceOptMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sceOptMenuItemActionPerformed
        JOptionPane.showMessageDialog(GuiUtilities.windowFor(this), "Sorry, not implemented yet!", "MMS", JOptionPane.INFORMATION_MESSAGE);

//        try {
//            SCEWizardFrame frame = new SCEWizardFrame();
//            frame.setDefaultCloseOperation( frame.EXIT_ON_CLOSE );
//            frame.setVisible( true );
//        } catch (IOException e) {
//
//        }
    }//GEN-LAST:event_sceOptMenuItemActionPerformed

    private void paramDescriptionLabelPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_paramDescriptionLabelPropertyChange
        if (evt.getOldValue() == null) return;
        mms.getParamSet().setDescription(paramDescriptionLabel.getText());
    }//GEN-LAST:event_paramDescriptionLabelPropertyChange

    private void controlDescriptionLabelPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_controlDescriptionLabelPropertyChange
        if (evt.getOldValue() == null) return;
        mms.getControlMap().setDescription(controlDescriptionLabel.getText());
    }//GEN-LAST:event_controlDescriptionLabelPropertyChange

    private void modelDescLabelPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_modelDescLabelPropertyChange
        if (evt.getOldValue() == null) return;
        mms.setControlValues("executable_desc", modelDescLabel.getText());
    }//GEN-LAST:event_modelDescLabelPropertyChange

    private void modelInfoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelInfoMenuItemActionPerformed
        MmsStringChooser msc = new MmsStringChooser("Model Info:", "", modelDescLabel);
        WindowFactory.displayInFrame(msc, "MMS");
    }//GEN-LAST:event_modelInfoMenuItemActionPerformed

    private void modelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelMenuItemActionPerformed
        String fileName = mms.getSingleControlValue("executable_model");
        String dirName = null;
        if (fileName != null) {
            dirName = fileName.substring(0, Mms.fileNameIndex(fileName));
        }

        JFileChooser chooser = new JFileChooser(dirName);
        chooser.setDialogTitle("MMS - Set the MMS Exeecutable");

        int returnVal = chooser.showOpenDialog(GuiUtilities.windowFor(this));
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            String foo = chooser.getSelectedFile().getAbsolutePath();
            int path_index = foo.lastIndexOf('.');
            String modelName = foo;
            if (path_index != -1) modelName = foo.substring(0, path_index);
            mms.setControlValues("executable_model", modelName);
            modelLabel.setText(mms.getSingleControlValue("executable_model"));

            loadSchemFile();


        }
    }//GEN-LAST:event_modelMenuItemActionPerformed

    private void controlInfoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlInfoMenuItemActionPerformed
        MmsStringChooser msc = new MmsStringChooser("Control Info:", "foo", controlDescriptionLabel);
        WindowFactory.displayInFrame(msc, "MMS");
    }//GEN-LAST:event_controlInfoMenuItemActionPerformed

    private void paramInfoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paramInfoMenuItemActionPerformed
        MmsStringChooser msc = new MmsStringChooser("Parameter Info:", "foo", paramDescriptionLabel);
        WindowFactory.displayInFrame(msc, "MMS");
    }//GEN-LAST:event_paramInfoMenuItemActionPerformed

    private void editParamMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editParamMenuItemActionPerformed
        ParamTool mpe = new ParamTool(mms.getParamSet(), mms.getDefaultParamSet());
        mpe.setTopLevel(true);
    }//GEN-LAST:event_editParamMenuItemActionPerformed

    private void fileNamesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNamesMenuItemActionPerformed
        MmsSetFileNamesChooser chooser = new MmsSetFileNamesChooser(mms);
        WindowFactory.displayInFrame(chooser, "MMS - Set Files");
    }//GEN-LAST:event_fileNamesMenuItemActionPerformed

    private void loadControlMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadControlMenuItemActionPerformed
        int n = JOptionPane.showOptionDialog(GuiUtilities.windowFor(this),
                "Do you want to save the old control\nsettings before loading new ones?",
                "MMS - Save Control", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                null, null, null);

        if (n == JOptionPane.YES_OPTION) {
            JFileChooser chooser = new JFileChooser(mms.getControlMap().getDirectory());
            chooser.setDialogTitle("MMS - Save Current Control File");

            int returnVal = chooser.showOpenDialog(GuiUtilities.windowFor(this));
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                mms.saveControlFile(chooser.getSelectedFile().getAbsolutePath());
            } else {
                return;
            }
        }

        JFileChooser chooser = new JFileChooser(mms.getControlMap().getDirectory());
        chooser.setDialogTitle("MMS - Load New Control File");

        int returnVal = chooser.showOpenDialog(GuiUtilities.windowFor(this));
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            mms.loadControlFile(chooser.getSelectedFile().getAbsolutePath());

        }
    }//GEN-LAST:event_loadControlMenuItemActionPerformed

    private void loadParamsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadParamsMenuItemActionPerformed

        ParameterSet mps = mms.getParamSet();
        String dir = null;

        if (mps != null) {
            int n = JOptionPane.showOptionDialog(GuiUtilities.windowFor(this),
                    "Do you want to save the old parameter\nsettings before loading new ones?",
                    "MMS - Save Parameters", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                    null, null, null);

            if (n == JOptionPane.YES_OPTION) {
                JFileChooser chooser = new JFileChooser(mms.getParamSet().getDirectory());
                chooser.setDialogTitle("MMS - Save Current Parameter File");

                int returnVal = chooser.showOpenDialog(GuiUtilities.windowFor(this));
                if(returnVal == JFileChooser.APPROVE_OPTION) {
                    mms.saveParamFile(chooser.getSelectedFile().getAbsolutePath());
                } else {
                    return;
                }
            }
            dir = mms.getParamSet().getDirectory();
        }

        JFileChooser chooser = new JFileChooser(dir);
        chooser.setDialogTitle("MMS - Load New Parameter File");

        int returnVal = chooser.showOpenDialog(GuiUtilities.windowFor(this));
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            mms.loadParamFile(chooser.getSelectedFile().getAbsolutePath());

        }
    }//GEN-LAST:event_loadParamsMenuItemActionPerformed

    private void manualHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualHelpActionPerformed
        OuiHelp.OuiHelpFactory().showTopic("");
    }//GEN-LAST:event_manualHelpActionPerformed

    private void loadDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataMenuItemActionPerformed
        MmsDataFileChooser mdfc = new MmsDataFileChooser(mms);
        WindowFactory.displayInFrame(mdfc, "MMS - Data Files");
    }//GEN-LAST:event_loadDataMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        exit();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void saveControlMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveControlMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser(mms.getControlMap().getDirectory());
        chooser.setDialogTitle("MMS - Save Current Control File");

        int returnVal = chooser.showOpenDialog(GuiUtilities.windowFor(this));
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            mms.saveControlFile(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_saveControlMenuItemActionPerformed

    private void saveParamsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveParamsMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser(mms.getParamSet().getDirectory());
        chooser.setDialogTitle("MMS - Save Current Parameter File");

        int returnVal = chooser.showOpenDialog(GuiUtilities.windowFor(this));
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            mms.saveParamFile(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_saveParamsMenuItemActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        exit();
    }//GEN-LAST:event_exitForm

    private void exit() {
        if (mms.isTopLevel()) System.exit(0);
        else WindowFactory.instance().closeWindow(this);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel controlDescriptionLabel;
    private javax.swing.JMenuItem controlInfoMenuItem;
    private javax.swing.JLabel controlNameLabel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JScrollPane controlScrollPane;
    private javax.swing.JList dataFileList;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JMenu editMwnu;
    private javax.swing.JMenuItem editParamMenuItem;
    private javax.swing.JMenuItem espMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileNamesMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem hyperMenuItem;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuItem loadControlMenuItem;
    private javax.swing.JMenuItem loadDataMenuItem;
    private javax.swing.JMenuItem loadParamsMenuItem;
    private javax.swing.JMenuItem manualHelp;
    private javax.swing.JLabel modelDescLabel;
    private javax.swing.JMenuItem modelInfoMenuItem;
    private javax.swing.JLabel modelLabel;
    private javax.swing.JMenuItem modelMenuItem;
    private javax.swing.JPanel modelPanel;
    private javax.swing.JMenu optMenu;
    private javax.swing.JLabel paramDescriptionLabel;
    private javax.swing.JMenuItem paramInfoMenuItem;
    private javax.swing.JLabel paramNameLabel;
    private javax.swing.JPanel paramPanel;
    private javax.swing.JMenuItem prmsSensMenuItem;
    private javax.swing.JMenuItem rosOptMenuItem;
    private javax.swing.JMenu runMenu;
    private javax.swing.JMenuItem saveControlMenuItem;
    private javax.swing.JMenuItem saveParamsMenuItem;
    private javax.swing.JMenuItem sceOptMenuItem;
    private javax.swing.JScrollPane schemScrollPane;
    private javax.swing.JMenu sensMenu;
    private javax.swing.JMenuItem sensMenuItem;
    private javax.swing.JMenuItem singleRunMenuItem;
    // End of variables declaration//GEN-END:variables

    private boolean isThereAnOldSchematicFile() {
        String schemFileName = mms.getNameFileBase() + ".mod_name";
        File f = new File (schemFileName);

        String line;
        BufferedReader in = null;
        boolean foo = false;

        return false;

//        try {
//            in = new BufferedReader(new FileReader(schemFileName));
//            line = in.readLine();
//            foo = line.contentEquals("PRMS Module Name File");
//
////            System.out.println ("foo = " + foo);
////            System.out.println ("|Printout of module call order, version, variables, and parameters.|");
////                    System.out.println ("|" + line + "|");
//        } catch (IOException ex) {
//            System.out.println("Problem reading schematic file");
//            ex.printStackTrace();
//
//        } finally {
//            try {
//                if (in != null) {
//                    in.close();
//                    in = null;
//                }
//            } catch (IOException E) {
//            }
//        }
//        return !foo;
    }



}
