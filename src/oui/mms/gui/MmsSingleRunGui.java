/*
 * MmsSingleRunGui.java
 *
 * Created on July 15, 2005, 8:04 AM
 */

package oui.mms.gui;

import gov.usgs.cawsc.gui.GuiUtilities;
import gov.usgs.cawsc.gui.WindowFactory;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.TableModel;
import oui.mms.datatypes.OuiCalendar;
import oui.util.OuiHelp;
import oui.util.StdErrPrinter;

/**
 *
 * @author  markstro
 * Swing layout updated by John Donovan
 */
public class MmsSingleRunGui extends JPanel implements TableModel {
//    CommandRunner runner = null;
    private Process process;
    private Thread valueReader;
    private Thread stdErrPrinter;
    private Mms mms;

    /** Creates new form MmsSingleRunGui */
    public MmsSingleRunGui(Mms mms) {
        initComponents();
        this.mms = mms;

        timeTable.setModel(this);
        timeTablePanel.add(timeTable.getTableHeader(), java.awt.BorderLayout.NORTH);

        initTimeStepTextField.setText(mms.getSingleControlValue("initial_deltat"));

        numRTSpinner.setValue(new Integer(mms.getSingleControlValue("ndispGraphs")));
//        setCheckBox("db_on_off", dbCheckBox);
        setCheckBox("init_vars_from_file", varInitCheckBox);
        setCheckBox("save_vars_to_file", varSaveCheckBox);
        setCheckBox("statsON_OFF", statsCheckBox);
        setCheckBox("statsON_OFF", statVarCheckBox);

        if (mms.getControlValueExists("gisOutON_OFF")) {
            setCheckBox("gisOutON_OFF", gisOutCheckBox);
        }

        if (mms.getControlValueExists("aniOutON_OFF")) {
            setCheckBox("aniOutON_OFF", gisOutCheckBox);
        }

//        dbTextField.setText(Mms.getSingleControlValue("db_file_exten"));
        modelOutTextField.setText(mms.getSingleControlValue("model_output_file"));
        varInitTextBox.setText(mms.getSingleControlValue("var_init_file"));
        varSaveTextBox.setText(mms.getSingleControlValue("var_save_file"));
        statsTextBox.setText(mms.getSingleControlValue("stats_output_file"));
        statVarTextBox.setText(mms.getSingleControlValue("stat_var_file"));

        if (mms.getControlValueExists("gis_output_file")) {
            gisOutTextField.setText(mms.getSingleControlValue("gis_output_file"));
        }

        if (mms.getControlValueExists("ani_output_file")) {
            gisOutTextField.setText(mms.getSingleControlValue("ani_output_file"));
        }
    }

    private void setCheckBox(String controlString, JCheckBox cb) {
        if (mms.getSingleControlValue(controlString).equals("1")) {
            cb.setSelected(true);
        } else {
            cb.setSelected(false);
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphingButtonGroup = new javax.swing.ButtonGroup();
        topPanel = new javax.swing.JPanel();
        timePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        initTimeStepTextField = new javax.swing.JTextField();
        timeTablePanel = new javax.swing.JPanel();
        timeTable = new javax.swing.JTable();
        graphPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        numRTSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        editRTComboBox = new javax.swing.JComboBox();
        filePanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        modelOutCheckBox = new javax.swing.JCheckBox();
        modelOutTextField = new javax.swing.JTextField();
        varInitCheckBox = new javax.swing.JCheckBox();
        varInitTextBox = new javax.swing.JTextField();
        varSaveCheckBox = new javax.swing.JCheckBox();
        varSaveTextBox = new javax.swing.JTextField();
        statsCheckBox = new javax.swing.JCheckBox();
        statsTextBox = new javax.swing.JTextField();
        statVarCheckBox = new javax.swing.JCheckBox();
        statVarTextBox = new javax.swing.JTextField();
        statVarButton = new javax.swing.JButton();
        gisOutCheckBox = new javax.swing.JCheckBox();
        gisOutTextField = new javax.swing.JTextField();
        gisOutButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();

        timePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setBackground(new java.awt.Color(153, 0, 204));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Time Info");
        jLabel1.setOpaque(true);

        jLabel2.setText("Init Timestep");

        initTimeStepTextField.setColumns(10);
        initTimeStepTextField.setText("24.0");
        initTimeStepTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                initTimeStepTextFieldFocusLost(evt);
            }
        });
        initTimeStepTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initTimeStepTextFieldActionPerformed(evt);
            }
        });

        timeTablePanel.setLayout(new java.awt.BorderLayout());

        timeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Second", null, null, null, null},
                {"Minute", null, null, null, null},
                {"Hour", null, null, null, null},
                {"Day", null, null, null, null},
                {"Month", null, null, null, null},
                {"Year", null, null, null, null}
            },
            new String [] {
                "", "Model Start", "Model End", "Data Start", "Data End"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        timeTable.setOpaque(false);
        timeTablePanel.add(timeTable, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout timePanelLayout = new javax.swing.GroupLayout(timePanel);
        timePanel.setLayout(timePanelLayout);
        timePanelLayout.setHorizontalGroup(
            timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, timePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(initTimeStepTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(timeTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        timePanelLayout.setVerticalGroup(
            timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timePanelLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(initTimeStepTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        graphPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setBackground(new java.awt.Color(153, 0, 204));
        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Graphing Program");
        jLabel3.setOpaque(true);

        jLabel5.setText("How Many Runtime Graphs?");

        numRTSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numRTSpinnerChanged(evt);
            }
        });

        jLabel6.setText("Edit Options for Graph:");

        editRTComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));
        editRTComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRTComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(graphPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numRTSpinner)
                    .addComponent(editRTComboBox, 0, 57, Short.MAX_VALUE))
                .addContainerGap())
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphPanelLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(numRTSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(editRTComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addComponent(timePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(timePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        filePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setBackground(new java.awt.Color(153, 0, 204));
        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("File Info");
        jLabel4.setOpaque(true);

        modelOutCheckBox.setSelected(true);
        modelOutCheckBox.setText("Model Output:");
        modelOutCheckBox.setEnabled(false);

        modelOutTextField.setColumns(10);
        modelOutTextField.setText("jTextField1");
        modelOutTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                modelOutTextFieldFocusLost(evt);
            }
        });
        modelOutTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelOutTextFieldActionPerformed(evt);
            }
        });

        varInitCheckBox.setText("Variable Init:");
        varInitCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                varInitCheckBoxActionPerformed(evt);
            }
        });

        varInitTextBox.setColumns(10);
        varInitTextBox.setText("jTextField1");
        varInitTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                varInitTextBoxFocusLost(evt);
            }
        });
        varInitTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                varInitTextBoxActionPerformed(evt);
            }
        });

        varSaveCheckBox.setText("Variable Save:");
        varSaveCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                varSaveCheckBoxActionPerformed(evt);
            }
        });

        varSaveTextBox.setColumns(10);
        varSaveTextBox.setText("jTextField1");
        varSaveTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                varSaveTextBoxFocusLost(evt);
            }
        });
        varSaveTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                varSaveTextBoxActionPerformed(evt);
            }
        });

        statsCheckBox.setText("Statistics:");
        statsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statsCheckBoxActionPerformed(evt);
            }
        });

        statsTextBox.setColumns(10);
        statsTextBox.setText("jTextField1");
        statsTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                statsTextBoxFocusLost(evt);
            }
        });
        statsTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statsTextBoxActionPerformed(evt);
            }
        });

        statVarCheckBox.setText("Stat Var");
        statVarCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statVarCheckBoxActionPerformed(evt);
            }
        });

        statVarTextBox.setColumns(10);
        statVarTextBox.setText("jTextField1");
        statVarTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                statVarTextBoxFocusLost(evt);
            }
        });
        statVarTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statVarTextBoxActionPerformed(evt);
            }
        });

        statVarButton.setText("Select Statistics Variables");
        statVarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statVarButtonActionPerformed(evt);
            }
        });

        gisOutCheckBox.setText("GIS Output");
        gisOutCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gisOutCheckBoxActionPerformed(evt);
            }
        });

        gisOutTextField.setColumns(10);
        gisOutTextField.setText("jTextField1");
        gisOutTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                gisOutTextFieldFocusLost(evt);
            }
        });
        gisOutTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gisOutTextFieldActionPerformed(evt);
            }
        });

        gisOutButton.setText("Select GIS Output Variables");
        gisOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gisOutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gisOutCheckBox)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(statVarCheckBox)
                        .addGap(56, 56, 56)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statVarTextBox)
                            .addComponent(gisOutTextField))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(gisOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(statVarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modelOutCheckBox)
                            .addComponent(varInitCheckBox)
                            .addComponent(varSaveCheckBox)
                            .addComponent(statsCheckBox))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statsTextBox)
                            .addComponent(varSaveTextBox)
                            .addComponent(varInitTextBox)
                            .addComponent(modelOutTextField))
                        .addGap(221, 221, 221))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelOutCheckBox)
                    .addComponent(modelOutTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(varInitCheckBox)
                    .addComponent(varInitTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(varSaveCheckBox)
                    .addComponent(varSaveTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statsCheckBox)
                    .addComponent(statsTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statVarCheckBox)
                    .addComponent(statVarTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statVarButton))
                .addGap(7, 7, 7)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gisOutCheckBox)
                    .addComponent(gisOutTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gisOutButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout filePanelLayout = new javax.swing.GroupLayout(filePanel);
        filePanel.setLayout(filePanelLayout);
        filePanelLayout.setHorizontalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        filePanelLayout.setVerticalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePanelLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(startButton);

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(stopButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(helpButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(buttonPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(filePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editRTComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRTComboBoxActionPerformed
        int sel = ((Integer)(editRTComboBox.getSelectedItem())).intValue();
        MmsRTGVariableSelector panel = new MmsRTGVariableSelector(mms, sel);
        
        String title = "MMS - Select Variables for Run Time Plot " + sel;
        WindowFactory.displayInFrame(panel, title);
    }//GEN-LAST:event_editRTComboBoxActionPerformed

    private void numRTSpinnerChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numRTSpinnerChanged
//        System.out.println("Spinner Changed");
        int count = ((Integer)(numRTSpinner.getValue())).intValue();
        Integer[] foo = new Integer[count];
        mms.setControlValues("ndispGraphs", new String ("" + count));
 /*
  *  Remove variables that don't belong any more
  */
        ArrayList<String> varNames = mms.getControlValues(MmsRTGVariableSelector.nameControlString);
        ArrayList<String> varIndex = mms.getControlValues(MmsRTGVariableSelector.indexControlString);
        ArrayList<String> varPlot = mms.getControlValues(MmsRTGVariableSelector.plotControlString);
/*
 *  Figure out new control array sizes
 */
        int newSize = 0;
        for (int i = 0; i < varPlot.size(); i++) {
            if (Integer.parseInt(varPlot.get(i)) <= count) newSize++;
        }

        ArrayList<String> newVarNames = new ArrayList<String> (newSize);
        ArrayList<String> newVarIndex = new ArrayList<String> (newSize);
        ArrayList<String> newVarPlot = new ArrayList<String> (newSize);
/*
 * Copy in the values that are not from the selected plot
 */
        int ind = 0;
        for (int i = 0; i < varPlot.size(); i++) {
            if (Integer.parseInt(varPlot.get(i)) <= count) {
                newVarNames.add(ind, varNames.get(i));
                newVarIndex.add(ind, varIndex.get(i));
                newVarPlot.add(ind++, varPlot.get(i));
            }
        }

        mms.setControlValues(MmsRTGVariableSelector.nameControlString, newVarNames);
        mms.setControlValues(MmsRTGVariableSelector.indexControlString, newVarIndex);
        mms.setControlValues(MmsRTGVariableSelector.plotControlString, newVarPlot);

/*
 * Set the combo box to the new size
 */
        for (int i = 0; i < count; i++) foo[i] = new Integer(i+1);
        editRTComboBox.setModel(new javax.swing.DefaultComboBoxModel(foo));
    }//GEN-LAST:event_numRTSpinnerChanged

    private void gisOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gisOutButtonActionPerformed
        if (mms.getControlValueExists("ngisOutVars")) {
            MmsVariableSelector panel = new MmsVariableSelector(mms, "ngisOutVars", "gisOutVar_names");
            String title = "MMS - Select Variables for GIS Output";
            WindowFactory.displayInFrame(panel, title);
        }

        if (mms.getControlValueExists("aniOutVar_names")) {
            MmsVariableSelector panel = new MmsVariableSelector(mms, "naniOutVars", "aniOutVar_names");
            String title = "MMS - Select Variables for GIS Output";
            WindowFactory.displayInFrame(panel, title);
            WindowFactory.instance().displayInWindow(panel);
        }
    }//GEN-LAST:event_gisOutButtonActionPerformed

    private void gisOutTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_gisOutTextFieldFocusLost
        if (mms.getControlValueExists("gis_output_file")) {
            mms.setControlValues("gis_output_file", gisOutTextField.getText());
        }

        if (mms.getControlValueExists("ani_output_file")) {
            mms.setControlValues("ani_output_file", gisOutTextField.getText());
        }
    }//GEN-LAST:event_gisOutTextFieldFocusLost

    private void gisOutTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gisOutTextFieldActionPerformed
        if (mms.getControlValueExists("gis_output_file")) {
            mms.setControlValues("gis_output_file", gisOutTextField.getText());
        }

        if (mms.getControlValueExists("ani_output_file")) {
            mms.setControlValues("ani_output_file", gisOutTextField.getText());
        }
    }//GEN-LAST:event_gisOutTextFieldActionPerformed

    private void statVarTextBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_statVarTextBoxFocusLost
        mms.setControlValues("stat_var_file", statVarTextBox.getText());
    }//GEN-LAST:event_statVarTextBoxFocusLost

    private void statVarTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statVarTextBoxActionPerformed
        mms.setControlValues("stat_var_file", statVarTextBox.getText());
    }//GEN-LAST:event_statVarTextBoxActionPerformed

    private void statVarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statVarButtonActionPerformed
        MmsVariableSelector panel = new MmsVariableSelector(mms, "nstatVars", "statVar_names", "statVar_element");
        String title = "MMS - Select Statistic Variables";
        WindowFactory.displayInFrame(panel, title);
    }//GEN-LAST:event_statVarButtonActionPerformed

    private void statsTextBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_statsTextBoxFocusLost
        mms.setControlValues("stats_output_file", statsTextBox.getText());
    }//GEN-LAST:event_statsTextBoxFocusLost

    private void statsTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statsTextBoxActionPerformed
        mms.setControlValues("stats_output_file", statsTextBox.getText());
    }//GEN-LAST:event_statsTextBoxActionPerformed

    private void varSaveTextBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_varSaveTextBoxFocusLost
        mms.setControlValues("var_save_file", varSaveTextBox.getText());
    }//GEN-LAST:event_varSaveTextBoxFocusLost

    private void varSaveTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_varSaveTextBoxActionPerformed
        mms.setControlValues("var_save_file", varSaveTextBox.getText());
    }//GEN-LAST:event_varSaveTextBoxActionPerformed

    private void varInitTextBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_varInitTextBoxFocusLost
        mms.setControlValues("var_init_file", varInitTextBox.getText());
    }//GEN-LAST:event_varInitTextBoxFocusLost

    private void varInitTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_varInitTextBoxActionPerformed
        mms.setControlValues("var_init_file", varInitTextBox.getText());
    }//GEN-LAST:event_varInitTextBoxActionPerformed

    private void modelOutTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_modelOutTextFieldFocusLost
        mms.setControlValues("model_output_file", modelOutTextField.getText());
    }//GEN-LAST:event_modelOutTextFieldFocusLost

    private void modelOutTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelOutTextFieldActionPerformed
        mms.setControlValues("model_output_file", modelOutTextField.getText());
    }//GEN-LAST:event_modelOutTextFieldActionPerformed

    private void gisOutCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gisOutCheckBoxActionPerformed
        if (mms.getControlValueExists("gisOutON_OFF")) {
            setOnOff("gisOutON_OFF", gisOutCheckBox.isSelected());
        }

        if (mms.getControlValueExists("aniOutON_OFF")) {
            setOnOff("aniOutON_OFF", gisOutCheckBox.isSelected());
        }
    }//GEN-LAST:event_gisOutCheckBoxActionPerformed

    private void statVarCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statVarCheckBoxActionPerformed
        setOnOff("statsON_OFF", statVarCheckBox.isSelected());
        statsCheckBox.setSelected(statVarCheckBox.isSelected());
    }//GEN-LAST:event_statVarCheckBoxActionPerformed

    private void varSaveCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_varSaveCheckBoxActionPerformed
        setOnOff("save_vars_to_file", varSaveCheckBox.isSelected());
    }//GEN-LAST:event_varSaveCheckBoxActionPerformed

    private void varInitCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_varInitCheckBoxActionPerformed
        setOnOff("init_vars_from_file", varInitCheckBox.isSelected());
    }//GEN-LAST:event_varInitCheckBoxActionPerformed

    private void statsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statsCheckBoxActionPerformed
        setOnOff("statsON_OFF", statsCheckBox.isSelected());
        statVarCheckBox.setSelected(statsCheckBox.isSelected());
    }//GEN-LAST:event_statsCheckBoxActionPerformed

    private void setOnOff(String controlString, boolean isSet) {
        if (isSet) {
            mms.setControlValues(controlString, "1");
        } else {
            mms.setControlValues(controlString, "0");
        }
    }

    private void initTimeStepTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_initTimeStepTextFieldFocusLost
        mms.setControlValues("initial_deltat", initTimeStepTextField.getText());
    }//GEN-LAST:event_initTimeStepTextFieldFocusLost

    private void initTimeStepTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initTimeStepTextFieldActionPerformed
        mms.setControlValues("initial_deltat", initTimeStepTextField.getText());
    }//GEN-LAST:event_initTimeStepTextFieldActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        mms.saveControlFile();

//        String env = " -E" + Mms.getControlMap().getDirectory() + File.separatorChar + "mms.env";
//        String control = " -C" + Mms.getControlMap().getDirectory() + File.separatorChar + Mms.getControlMap().getShortFileName();
        String control = " -C" + mms.getControlMap().getFileName();
        String executable = mms.getSingleControlValue("executable_model");
        String arg = executable + control + " -rtg";
        System.out.println("MmsSingleRunGui: executing = " + arg);

//        try {
//            runner = new CommandRunner(arg);
//            runner.evaluate();
//            JOptionPane.showMessageDialog(this, "Run Completed", "Run Status", JOptionPane.INFORMATION_MESSAGE);
//            runner = null;
//
//        } catch (IOException e) {
//            JOptionPane.showMessageDialog(this, "Run Unsuccessful\n" + e.getMessage(), "Run Status", JOptionPane.ERROR_MESSAGE);
//            runner = null;
//        }

        try {
            process = Runtime.getRuntime().exec(arg);
            valueReader = new MmsRuntimeValueReader(process, this, mms);
            stdErrPrinter = new StdErrPrinter(process);
            valueReader.start();
            stdErrPrinter.start();
//            try{
//                valueReader.join();
//                stdErrPrinter.join();
//            }catch(InterruptedException ie) {
//                ie.printStackTrace();
//            }

        } catch(IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_startButtonActionPerformed

    public void modelFinished () {
        System.out.println("MmsSingleRunGui: modelFinished");


       JOptionPane.showMessageDialog(GuiUtilities.windowFor(this), "Model Finished");

//        System.out.println(valueReader.getState() + " " + valueReader.isAlive() );
//        System.out.println(stdErrPrinter.getState() + " " + stdErrPrinter.isAlive() );
//        valueReader.
//        stdErrPrinter
    }

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        OuiHelp.OuiHelpFactory().showTopic ("");
    }//GEN-LAST:event_helpButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
//        Mms.saveControlFile();
        exit();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (process != null) process.destroy();
    }//GEN-LAST:event_stopButtonActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        exit();
    }//GEN-LAST:event_exitForm

    private void exit() {
        if (mms.isTopLevel()) System.exit(0);
        else WindowFactory.instance().closeWindow(this);
    }


    /*
     *  Here's the table model interface for the time table
     */
    private String[] colNames = {"", "Model Start", "Model End", "Data Start", "Data End"};
    private String[] rowNames = {"Second", "Minute", "Hour", "Day", "Month", "Year"};

    public void addTableModelListener(javax.swing.event.TableModelListener l) {}

    public int getColumnCount() {return 5;}
    public String getColumnName(int columnIndex) {return colNames[columnIndex];}
    public int getRowCount() {return 6;}
    public void removeTableModelListener(javax.swing.event.TableModelListener l) {}

    public Class getColumnClass(int columnIndex) {
        if (columnIndex == 0)
            return String.class;
        else
            return Integer.class;
    }

    public boolean isCellEditable(int rowIndex, int columnIndex) {
        if (columnIndex == 0) return false;
        return true;
    }

    public Object getValueAt(int rowIndex, int columnIndex) {
        if (columnIndex == 0) {
            return rowNames[rowIndex];

        } else if (columnIndex == 1){
            return new Integer(mms.getControlValues("start_time").get(5-rowIndex));

        } else if (columnIndex == 2){
            return new Integer(mms.getControlValues("end_time").get(5-rowIndex));

        } else if (columnIndex == 3){
            OuiCalendar dataStart = mms.getVariableSet().getStart();

            if (rowIndex == 0) {
                return new Integer(dataStart.get(Calendar.SECOND));
            } else if (rowIndex == 1) {
                return new Integer(dataStart.get(Calendar.MINUTE));
            } else if (rowIndex == 2) {
                return new Integer(dataStart.get(Calendar.HOUR));
            } else if (rowIndex == 3) {
                return new Integer(dataStart.get(Calendar.DAY_OF_MONTH));
            } else if (rowIndex == 4) {
                return new Integer(dataStart.get(Calendar.MONTH)+1);
            } else {
                return new Integer(dataStart.get(Calendar.YEAR));
            }
        } else if (columnIndex == 4){
            OuiCalendar dataEnd = mms.getVariableSet().getEnd();

            if (rowIndex == 0) {
                return new Integer(dataEnd.get(Calendar.SECOND));
            } else if (rowIndex == 1) {
                return new Integer(dataEnd.get(Calendar.MINUTE));
            } else if (rowIndex == 2) {
                return new Integer(dataEnd.get(Calendar.HOUR));
            } else if (rowIndex == 3) {
                return new Integer(dataEnd.get(Calendar.DAY_OF_MONTH));
            } else if (rowIndex == 4) {
                return new Integer(dataEnd.get(Calendar.MONTH)+1);
            } else {
                return new Integer(dataEnd.get(Calendar.YEAR));
            }
        } else {
            return new Integer(-999);
        }

    }

    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
        if (columnIndex == 1){
            mms.setControlValues("start_time", 5-rowIndex, aValue.toString());

        } else if (columnIndex == 2){
            mms.setControlValues("end_time", 5-rowIndex, aValue.toString());

        } else {
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JComboBox editRTComboBox;
    private javax.swing.JPanel filePanel;
    private javax.swing.JButton gisOutButton;
    private javax.swing.JCheckBox gisOutCheckBox;
    private javax.swing.JTextField gisOutTextField;
    private javax.swing.JPanel graphPanel;
    private javax.swing.ButtonGroup graphingButtonGroup;
    private javax.swing.JButton helpButton;
    private javax.swing.JTextField initTimeStepTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JCheckBox modelOutCheckBox;
    private javax.swing.JTextField modelOutTextField;
    private javax.swing.JSpinner numRTSpinner;
    private javax.swing.JButton startButton;
    private javax.swing.JButton statVarButton;
    private javax.swing.JCheckBox statVarCheckBox;
    private javax.swing.JTextField statVarTextBox;
    private javax.swing.JCheckBox statsCheckBox;
    private javax.swing.JTextField statsTextBox;
    private javax.swing.JButton stopButton;
    private javax.swing.JPanel timePanel;
    private javax.swing.JTable timeTable;
    private javax.swing.JPanel timeTablePanel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JCheckBox varInitCheckBox;
    private javax.swing.JTextField varInitTextBox;
    private javax.swing.JCheckBox varSaveCheckBox;
    private javax.swing.JTextField varSaveTextBox;
    // End of variables declaration//GEN-END:variables

}
