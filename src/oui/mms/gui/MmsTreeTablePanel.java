/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MmsTreeTablePanel.java
 *
 * Created on Feb 23, 2009, 11:33:43 AM
 */

package oui.mms.gui;

import java.util.ArrayList;
import java.util.Iterator;
import oui.mms.gui.MmsSchematicTree.MmsModule;
import oui.mms.gui.treetable.JTreeTable;
import oui.mms.gui.treetable.PrmsModel;
import oui.mms.gui.treetable.PrmsNode;
import oui.mms.datatypes.Dimension;
import oui.mms.datatypes.Parameter;
import oui.mms.datatypes.ParameterSet;
import oui.mms.datatypes.Variable;
import oui.mms.datatypes.VariableSet;

/**
 *
 * @author markstro
 */
public class MmsTreeTablePanel extends javax.swing.JPanel {

    private JTreeTable treeTable;

    /** Creates new form MmsTreeTablePanel */
    public MmsTreeTablePanel(Mms mms) {
        initComponents();
        String foo;

        // Set the model stuff
        MmsSchematicTree schematic =  new MmsSchematicTree(mms.getNameFileBase() + ".mod_name");
//        MmsSchematicTree schematic = null;
        mms.setSchematicTree (schematic);
        PrmsNode prmsRoot = new PrmsNode(schematic.getModelName(), null, "executable", null, null, null);

        // Set the dimension stuff.
        ParameterSet defaultPs = mms.getDefaultParamSet();
        ParameterSet valuePs = mms.getParamSet();

        PrmsNode dimensions = new PrmsNode("Dimensions", null, null, null, null, null);

        Iterator<Dimension> it = defaultPs.getDimenIterator();
        while (it.hasNext()) {
            Dimension defDim = it.next();
            Dimension valDim = valuePs.getDimension(defDim.getName());

            if (valDim != null && valDim.getSize() > 0) {
                if (defDim.isFixed()) {
                    foo = "Fixed Dimension";
                } else {
                    foo = "Dimension";
                }
                PrmsNode dimNode = new PrmsNode(defDim.getName(), defDim.getDesc(), foo, null, "" + valDim.getSize(), null);
                dimensions.addChild(dimNode);
            }
        }

        prmsRoot.addChild(dimensions);

        // Set the module stuff
        PrmsNode modulesNode = new PrmsNode("Modules", null, null, null, null, null);
        ArrayList<MmsModule> modules1 = schematic.getModules();
        Iterator<MmsModule> it2 = modules1.iterator();

        while (it2.hasNext()) {
            MmsModule mod = it2.next();
            PrmsNode modNode = new PrmsNode(mod.getName(), mod.getVersion(), "module", null, null, null);
//            System.out.println ("module = " + mod.getName());

            // Set the parameter stuff
            if (!mod.getParameters().isEmpty()) {
                PrmsNode paramNode = new PrmsNode("Paramters", null, null, null, null, null);
                Iterator<String> it3 = mod.getParameters().iterator();
                while (it3.hasNext()) {
                    String next = it3.next();
                    Parameter parameter = defaultPs.getParameter(next);
                    if (parameter != null) {
                        PrmsNode pNode = new PrmsNode(parameter.getName(), parameter.getDesc(), "Parameter", "" + parameter.getSize(), parameter.getMin() + "-" + parameter.getMax(), parameter.getUnits());
                        paramNode.addChild(pNode);
                    }
                }

                modNode.addChild(paramNode);
            }

            // Set the variable stuff
            if (!mod.getVariables().isEmpty()) {

                VariableSet variableSet = mms.getVariableSet();
                PrmsNode varNode = new PrmsNode("Variables", null, null, null, null, null);
//                Set varsForModule = variableSet.getVariablesForModule(mod.getName());

                Iterator<String> it4 = mod.getVariables().iterator();

                while (it4.hasNext()) {
                    String next = it4.next();
                    Variable variable = variableSet.getVariable(next);
                    if (variable != null) {
                        PrmsNode vNode = new PrmsNode(variable.getName(), variable.getDescription(), "Variable", "" + variable.getSize(), null, variable.getUnits());
                        varNode.addChild(vNode);
                    }
                }

                modNode.addChild(varNode);
            }
            modulesNode.addChild(modNode);
        }
        
        prmsRoot.addChild (modulesNode);
        treeTable = new JTreeTable(new PrmsModel(prmsRoot));
        scrollPane.getViewport().add(treeTable, null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();

        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

}
