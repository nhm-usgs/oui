/*
 * TimeSeriesTool.java
 *
 * Created on November 11, 2004, 11:32 AM
 */

package oui.tstool;

import gov.usgs.cawsc.gui.CloseablePanel;
import gov.usgs.cawsc.gui.MenuBarProvider;
import gov.usgs.cawsc.gui.PersistentSplitterTracker;
import gov.usgs.cawsc.gui.WindowFactory;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import oui.mms.datatypes.SpaceTimeSeriesData;
import oui.mms.datatypes.TimeSeries;
import oui.mms.io.MmsStatvarReader;
import oui.util.*;

/**
 *
 * @author  markstro
 */
public class TimeSeriesTool extends JPanel implements MenuBarProvider, CloseablePanel {
    private Plotter plotter = null;
    private DefaultListModel traceListModel = new DefaultListModel();
    private int plotType = 0;

    static int TIMESERIES_PLOT = 1;
    static int XY_POINT_PLOT = 2;
    static int XY_LINE_PLOT = 3;
    static int TIMESERIES_LOG_PLOT = 4;

    private static TimeSeriesTool timeSeriesTool = null;

    protected PersistentSplitterTracker persistentSplitterTracker = null;

    /*
     *  Singleton TimeSeriesTool
     */
    public static TimeSeriesTool createTimeSereiesTool() {
        if (timeSeriesTool == null) {
            timeSeriesTool = new TimeSeriesTool();

            WindowFactory.displayInFrame(timeSeriesTool, "Time Series Tool");
        }
        return timeSeriesTool;
    }

    /** Creates new form TimeSeriesTool */
    public TimeSeriesTool() {
        initComponents();
        traceListList.setModel(traceListModel);
        setPlotter(new TimeSeriesPlotter("", "", ""));
        
        persistentSplitterTracker = new PersistentSplitterTracker(this, jSplitPane1);
    }

    public JMenuBar getMenuBar() {
        return jMenuBar1;
    }

//    public int addTrace(double[] dates, double[] values, String list_name, String key_name) {
////        traceListModel.addElement(new TimeSeries(key_name, list_name, dates, values));
//        traceListModel.addElement(new TimeSeries(list_name, dates, values));
//        return 0;
//    }

    public int addTrace(TimeSeries tsc) {
        traceListModel.addElement(tsc);
        return 0;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        leftPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        traceListList = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        traceFromFileMenuItem = new javax.swing.JMenuItem();
        traceFromAnimationFile = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();
        statisticsMenu = new javax.swing.JMenu();
        standardStatsReportMenuItem = new javax.swing.JMenuItem();
        plotsMenu = new javax.swing.JMenu();
        timeSeriesMenuItem = new javax.swing.JMenuItem();
        timeSeriesLogMenuItem = new javax.swing.JMenuItem();
        XYMenuItem = new javax.swing.JMenuItem();
        errorMenuItem = new javax.swing.JMenuItem();
        errorSumMenuItem = new javax.swing.JMenuItem();
        flowDurationMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setResizeWeight(0.5);

        leftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Trace List"));

        jScrollPane1.setViewportView(traceListList);

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(leftPanel);

        fileMenu.setText("File");

        traceFromFileMenuItem.setText("Get Trace From File");
        traceFromFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceFromFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(traceFromFileMenuItem);

        traceFromAnimationFile.setText("Get Trace From Animation File");
        traceFromAnimationFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                traceFromAnimationFileActionPerformed(evt);
            }
        });
        fileMenu.add(traceFromAnimationFile);

        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenuItem);

        jMenuBar1.add(fileMenu);

        statisticsMenu.setText("Statistics");
        statisticsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statisticsMenuActionPerformed(evt);
            }
        });

        standardStatsReportMenuItem.setText("Standard Statistics Report");
        standardStatsReportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standardStatsReportMenuItemActionPerformed(evt);
            }
        });
        statisticsMenu.add(standardStatsReportMenuItem);

        jMenuBar1.add(statisticsMenu);

        plotsMenu.setText("Plots");
        plotsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotsMenuActionPerformed(evt);
            }
        });

        timeSeriesMenuItem.setText("Time Series");
        timeSeriesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeSeriesMenuItemActionPerformed(evt);
            }
        });
        plotsMenu.add(timeSeriesMenuItem);

        timeSeriesLogMenuItem.setText("Time Series (Log Y-axis)");
        timeSeriesLogMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeSeriesLogMenuItemActionPerformed(evt);
            }
        });
        plotsMenu.add(timeSeriesLogMenuItem);

        XYMenuItem.setText("XY");
        XYMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XYMenuItemActionPerformed(evt);
            }
        });
        plotsMenu.add(XYMenuItem);

        errorMenuItem.setText("Difference");
        errorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorMenuItemActionPerformed(evt);
            }
        });
        plotsMenu.add(errorMenuItem);

        errorSumMenuItem.setText("Difference Sum");
        errorSumMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorSumMenuItemActionPerformed(evt);
            }
        });
        plotsMenu.add(errorSumMenuItem);

        flowDurationMenuItem.setText("Flow Duration");
        flowDurationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flowDurationMenuItemActionPerformed(evt);
            }
        });
        plotsMenu.add(flowDurationMenuItem);

        jMenuBar1.add(plotsMenu);

        helpMenu.setText("Help");

        helpMenuItem.setText("OUI Users Manual");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpMenuItem);

        jMenuBar1.add(helpMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
            .addComponent(jMenuBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jMenuBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        OuiHelp.OuiHelpFactory().showTopic("");
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void plotsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotsMenuActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_plotsMenuActionPerformed

    private void timeSeriesLogMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeSeriesLogMenuItemActionPerformed
        PlotTimeSeriesLog plotTimeSeriesLog = new PlotTimeSeriesLog(this);
    }//GEN-LAST:event_timeSeriesLogMenuItemActionPerformed

    private void flowDurationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flowDurationMenuItemActionPerformed
        PlotFlowDuration plotFlowDuration = new PlotFlowDuration(this);
    }//GEN-LAST:event_flowDurationMenuItemActionPerformed

    private void errorSumMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorSumMenuItemActionPerformed
        PlotErrorSum plotErrorSum = new PlotErrorSum(this);
    }//GEN-LAST:event_errorSumMenuItemActionPerformed

    private void errorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorMenuItemActionPerformed
        PlotError plotError = new PlotError(this);
    }//GEN-LAST:event_errorMenuItemActionPerformed

    private void XYMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XYMenuItemActionPerformed
        PlotXY plotXY = new PlotXY(this);
    }//GEN-LAST:event_XYMenuItemActionPerformed

    private void timeSeriesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeSeriesMenuItemActionPerformed
        PlotTimeSeries plotTimeSeries = new PlotTimeSeries(this);
    }//GEN-LAST:event_timeSeriesMenuItemActionPerformed

    private void standardStatsReportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standardStatsReportMenuItemActionPerformed
        ReportStandardStats reportStandardStats = new ReportStandardStats(this);
    }//GEN-LAST:event_standardStatsReportMenuItemActionPerformed

    private void traceFromFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceFromFileMenuItemActionPerformed
        TimeSeries[] tscs = GetTraces.getTraces(this);
        if (tscs == null) {
            return;
        }
        for (int i = 0; i < tscs.length; i++) {
            addTrace(tscs[i]);
        }
    }//GEN-LAST:event_traceFromFileMenuItemActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        exit();
    }//GEN-LAST:event_quitMenuItemActionPerformed

//  THis is commented out because I have to get the OUI manual out and
//    I don't want to fool with this any more
//    private void obsPreMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
////        System.out.println("hook this up!");
//        new ReportOPStats(this);
//    }

    private void statisticsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statisticsMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statisticsMenuActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        exit();
    }//GEN-LAST:event_exitForm

    private void traceFromAnimationFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_traceFromAnimationFileActionPerformed
        TimeSeries[] tscs = GetTraces.getAnimationFileTraces(this);
        if (tscs == null) {
            return;
        }
        for (int i = 0; i < tscs.length; i++) {
            addTrace(tscs[i]);
        }
    }//GEN-LAST:event_traceFromAnimationFileActionPerformed

    private void exit() {
        WindowFactory.instance().closeWindow(timeSeriesTool);
        timeSeriesTool = null;
    }
    
    public void closePanel() {
        timeSeriesTool = null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        TimeSeriesTool tst = new TimeSeriesTool();
        WindowFactory.displayInFrame(tst, "Time Series Tool");

        if (args.length == 1) {
            if (args[0].equals("sntemp")) {
                // This is the hack to load all of the sntemp GCM runs without going thorugh the file selector
                String[] animationFileName = {
                    "/sshome/markstro/p2s/apps/acfGcmProjections/20120507/sntemp/out/calibrated/ccsm3_a1fi.nsegment",
                    "/sshome/markstro/p2s/apps/acfGcmProjections/20120507/sntemp/out/calibrated/ccsm3_b1.nsegment",
                    "/sshome/markstro/p2s/apps/acfGcmProjections/20120507/sntemp/out/calibrated/gfdl_a1fi.nsegment",
                    "/sshome/markstro/p2s/apps/acfGcmProjections/20120507/sntemp/out/calibrated/gfdl_b1.nsegment",
                    "/sshome/markstro/p2s/apps/acfGcmProjections/20120507/sntemp/out/calibrated/pcm_a1fi.nsegment",
                    "/sshome/markstro/p2s/apps/acfGcmProjections/20120507/sntemp/out/calibrated/pcm_b1.nsegment",
                    "/sshome/markstro/p2s/apps/acfGcmEval/20120502/sntemp/out/calibrated/maurer.nsegment",
                };
                String variableName = "tave";
                int hruIndex = 128;

                for (int i = 0; i < animationFileName.length; i++) {
                    SpaceTimeSeriesData dtsd = new SpaceTimeSeriesData(animationFileName[i]);
                    int spaceIndex = hruIndex - 1;

                    TimeSeries timeSeries = dtsd.getTimeSeries(variableName, spaceIndex);
                    timeSeries.setName(variableName + "_" + (spaceIndex + 1) + " " + animationFileName[i]);

                    tst.addTrace(timeSeries);
                }

            } else {
                MmsStatvarReader msr = new MmsStatvarReader(args[0]);
                String[] varList = msr.getVariableList();

                for (int i = 0; i < varList.length; i++) {
                    TimeSeries tscs = msr.getTimeSeries(varList[i]);

                    if (tscs != null) {
                        tst.addTrace(tscs);
                    }
                }
            }

        } else if (args.length == 3) {
            // arg[0] is the name of the animation file
            // arg[1] is the name of the vairable
            // arg[2] is the zone index (seg or HRU ID)
            SpaceTimeSeriesData dtsd = new SpaceTimeSeriesData(args[0]);
            int spaceIndex = Integer.parseInt(args[2]) - 1;

//            for (spaceIndex = 0; spaceIndex < dtsd.getZoneCount(); spaceIndex = spaceIndex + 10) {
                TimeSeries timeSeries = dtsd.getTimeSeries(args[1], spaceIndex);
                timeSeries.setName(args[1] + "_" + (spaceIndex + 1) + " " + args[0]);

                tst.addTrace(timeSeries);
//            }
        }
    }

    public void setPlotType(int plotType) {
        if (this.plotType == plotType) {
            plotter.clearAll();

        } else if (plotType == TIMESERIES_PLOT) {
//            setPlotter(new TimeSeriesPlotter("Time Series", "Date", "Values"));
            setPlotter(new TimeSeriesPlotter("", "Date", "Values"));
        } else if (plotType == XY_POINT_PLOT) {
//            setPlotter(new XYPlotter("XY", "X", "Y"));
            setPlotter(new XYPlotter("", "X", "Y"));
//            plotter.dontConnectPoints();
        } else if (plotType == XY_LINE_PLOT) {
//            setPlotter(new XYPlotter("XY", "X", "Y"));
            setPlotter(new XYPlotter("", "X", "Y"));
        } else if (plotType == TIMESERIES_LOG_PLOT) {
            setPlotter(new TimeSeriesPlotter("", "Date", "Log Values", true));
        } else {
            System.out.println("TimeSeriesTool::setPlotType type not known");
        }

    }


    /**
     * Getter for property plotter.
     * @return Value of property plotter.
     */
    public Plotter getPlotter() {
        return this.plotter;
    }

    /**
     * Setter for property plotter.
     * @param plotter New value of property plotter.
     */
    public final void setPlotter(Plotter plotter) {
        if (this.plotter != null) {
            this.plotter.clearAll();
            this.plotter = null;
        }

        this.plotter = plotter;
        jSplitPane1.setRightComponent(plotter.getPanel());
    }

    /**
     * Getter for property traceListList.
     * @return Value of property traceListList.
     */
    public JList getTraceListList() {
        return this.traceListList;
    }

    /**
     * Setter for property traceListList.
     * @param traceListList New value of property traceListList.
     */
    public void setTraceListList(JList traceListList) {
        this.traceListList = traceListList;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem XYMenuItem;
    private javax.swing.JMenuItem errorMenuItem;
    private javax.swing.JMenuItem errorSumMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem flowDurationMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JMenu plotsMenu;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JMenuItem standardStatsReportMenuItem;
    private javax.swing.JMenu statisticsMenu;
    private javax.swing.JMenuItem timeSeriesLogMenuItem;
    private javax.swing.JMenuItem timeSeriesMenuItem;
    private javax.swing.JMenuItem traceFromAnimationFile;
    private javax.swing.JMenuItem traceFromFileMenuItem;
    private javax.swing.JList traceListList;
    // End of variables declaration//GEN-END:variables

}
