/*
 * SpagtilPanel.java
 *
 * Created on October 30, 2006, 9:53 AM
 */

package oui.dogbyte;

import gov.usgs.cawsc.gui.GuiUtilities;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Insets;
import java.awt.LayoutManager;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Enumeration;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import org.omscentral.gis.model.Theme;
import org.omscentral.gis.model.VectorTheme;
import org.omscentral.gis.model.VectorModel;
import org.omscentral.gis.io.ShpFileParser;
import oui.mms.datatypes.SpaceTimeSeriesData;
import oui.mms.datatypes.Parameter;
import oui.mms.datatypes.ParameterSet;
import oui.mms.io.MmsDefaultParamsReader;
import oui.mms.io.MmsParamsReader;
import oui.paramtool.ParamToolTableModel;
import oui.util.TableSorter;
import oui.util.dbf.AttributeModelParameterEditorAdapter;
import oui.util.dbf.OuiAttributeModel;
import oui.util.dbf.OuiDbfFileParser;

/**
 *
 * @author  markstro
 */
public class DogbytePanel extends javax.swing.JPanel {
    private String dimension = null;
    private DogbyteGISPanel gisPanel = null;
    private Theme theme = null;
    private OuiAttributeModel gis_attribute_model = null;
    private ParameterSet ps = null;
    private DogbyteData data = null;
    private ParameterSet default_ps = null;
    
    /**
     * Creates new form DogbytePanel
     */
    public DogbytePanel(DogbyteData data) {
        initComponents();
        this.data = data;
        
        gisPanel = new DogbyteGISPanel();
        topPanel.add(gisPanel, java.awt.BorderLayout.CENTER);
        
/*
 * Fill up the list with dimension names from the XML file.
 */
        DefaultListModel dlm = new DefaultListModel();
        Enumeration e = data.getDims();
        while (e.hasMoreElements()) dlm.addElement(e.nextElement());
        dimList.setModel(dlm);
        
        initRowHeaders(paramTable);
        generateRowHeaders(paramTable, paramScrollPane);
        paramTable.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        paramTable.setRowSelectionAllowed(false);
        paramTable.setCellSelectionEnabled(true);
        
        setKey();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jSplitPane4 = new javax.swing.JSplitPane();
        keyPanel = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dimList = new javax.swing.JList();
        describeButton = new javax.swing.JButton();
        elsePanel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        topPanel = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        inputPanel = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        gisValsPanel = new javax.swing.JPanel();
        gisScrollPane = new javax.swing.JScrollPane();
        gisTable = new javax.swing.JTable();
        jLabel21 = new javax.swing.JLabel();
        paramValsPanel = new javax.swing.JPanel();
        paramScrollPane = new javax.swing.JScrollPane();
        paramTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        outputPanel = new javax.swing.JPanel();
        outputScrolllPane = new javax.swing.JScrollPane();
        outputTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        outputDateLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        keyPanel.setLayout(new javax.swing.BoxLayout(keyPanel, javax.swing.BoxLayout.Y_AXIS));

        keyPanel.setMaximumSize(new java.awt.Dimension(100, 32767));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "cyan/red", "red/cyan", "white/black", "black/white", "rainbow", "random" }));
        keyPanel.add(jComboBox1);

        jLabel1.setBackground(new java.awt.Color(0, 255, 255));
        jLabel1.setText("                    ");
        jLabel1.setOpaque(true);
        keyPanel.add(jLabel1);

        jLabel2.setBackground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("                    ");
        jLabel2.setOpaque(true);
        keyPanel.add(jLabel2);

        jLabel3.setBackground(new java.awt.Color(255, 51, 51));
        jLabel3.setText("                    ");
        jLabel3.setOpaque(true);
        keyPanel.add(jLabel3);

        jLabel4.setBackground(new java.awt.Color(255, 51, 51));
        jLabel4.setText("                    ");
        jLabel4.setOpaque(true);
        keyPanel.add(jLabel4);

        jLabel5.setBackground(new java.awt.Color(255, 51, 51));
        jLabel5.setText("                    ");
        jLabel5.setOpaque(true);
        keyPanel.add(jLabel5);

        jLabel6.setBackground(new java.awt.Color(255, 51, 51));
        jLabel6.setText("                    ");
        jLabel6.setOpaque(true);
        keyPanel.add(jLabel6);

        jLabel7.setBackground(new java.awt.Color(255, 51, 51));
        jLabel7.setText("                    ");
        jLabel7.setOpaque(true);
        keyPanel.add(jLabel7);

        jLabel8.setBackground(new java.awt.Color(255, 51, 51));
        jLabel8.setText("                    ");
        jLabel8.setOpaque(true);
        keyPanel.add(jLabel8);

        jLabel9.setBackground(new java.awt.Color(255, 51, 51));
        jLabel9.setText("                    ");
        jLabel9.setOpaque(true);
        keyPanel.add(jLabel9);

        jLabel10.setBackground(new java.awt.Color(153, 153, 153));
        jLabel10.setText("                    ");
        jLabel10.setOpaque(true);
        keyPanel.add(jLabel10);

        jLabel11.setBackground(new java.awt.Color(255, 51, 51));
        jLabel11.setText("                    ");
        jLabel11.setOpaque(true);
        keyPanel.add(jLabel11);

        jLabel12.setBackground(new java.awt.Color(255, 51, 51));
        jLabel12.setText("                    ");
        jLabel12.setOpaque(true);
        keyPanel.add(jLabel12);

        jLabel13.setBackground(new java.awt.Color(255, 51, 51));
        jLabel13.setText("                    ");
        jLabel13.setOpaque(true);
        keyPanel.add(jLabel13);

        jLabel14.setBackground(new java.awt.Color(255, 51, 51));
        jLabel14.setText("                    ");
        jLabel14.setOpaque(true);
        keyPanel.add(jLabel14);

        jLabel15.setBackground(new java.awt.Color(255, 51, 51));
        jLabel15.setText("                    ");
        jLabel15.setOpaque(true);
        keyPanel.add(jLabel15);

        jLabel16.setBackground(new java.awt.Color(255, 51, 51));
        jLabel16.setText("                    ");
        jLabel16.setOpaque(true);
        keyPanel.add(jLabel16);

        jLabel17.setBackground(new java.awt.Color(255, 51, 51));
        jLabel17.setText("                    ");
        jLabel17.setOpaque(true);
        keyPanel.add(jLabel17);

        jLabel18.setBackground(new java.awt.Color(255, 51, 51));
        jLabel18.setText("                    ");
        jLabel18.setOpaque(true);
        keyPanel.add(jLabel18);

        jLabel19.setBackground(new java.awt.Color(255, 51, 51));
        jLabel19.setText("                    ");
        jLabel19.setOpaque(true);
        keyPanel.add(jLabel19);

        jLabel20.setBackground(new java.awt.Color(255, 51, 51));
        jLabel20.setText("                    ");
        jLabel20.setOpaque(true);
        keyPanel.add(jLabel20);

        dimList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        dimList.setVisibleRowCount(10);
        dimList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dimListValueChanged(evt);
            }
        });

        jScrollPane2.setViewportView(dimList);

        keyPanel.add(jScrollPane2);

        describeButton.setText("Describe");
        describeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                describeButtonPushed(evt);
            }
        });

        keyPanel.add(describeButton);

        jSplitPane4.setLeftComponent(keyPanel);

        elsePanel.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(500);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                splitCallback(evt);
            }
        });

        topPanel.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setTopComponent(topPanel);

        jSplitPane2.setDividerLocation(400);
        gisValsPanel.setLayout(new java.awt.BorderLayout());

        gisScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        gisScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        gisTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        gisScrollPane.setViewportView(gisTable);

        gisValsPanel.add(gisScrollPane, java.awt.BorderLayout.CENTER);

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 18));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Geospatial Information");
        gisValsPanel.add(jLabel21, java.awt.BorderLayout.NORTH);

        jSplitPane2.setLeftComponent(gisValsPanel);

        paramValsPanel.setLayout(new java.awt.BorderLayout());

        paramTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        paramScrollPane.setViewportView(paramTable);

        paramValsPanel.add(paramScrollPane, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 18));
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Model Parameters");
        jPanel1.add(jLabel22, java.awt.BorderLayout.NORTH);

        jTextField1.setText("=gi.elev*3.281");
        jPanel1.add(jTextField1, java.awt.BorderLayout.CENTER);

        paramValsPanel.add(jPanel1, java.awt.BorderLayout.NORTH);

        jSplitPane2.setRightComponent(paramValsPanel);

        inputPanel.add(jSplitPane2);

        jSplitPane3.setLeftComponent(inputPanel);

        outputPanel.setLayout(new java.awt.BorderLayout());

        outputTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        outputScrolllPane.setViewportView(outputTable);

        outputPanel.add(outputScrolllPane, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 18));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("Model Output");
        jLabel23.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel2.add(jLabel23, java.awt.BorderLayout.NORTH);

        outputDateLabel.setFont(new java.awt.Font("Tahoma", 2, 13));
        outputDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        outputDateLabel.setText("10/01/1998");
        jPanel2.add(outputDateLabel, java.awt.BorderLayout.CENTER);

        outputPanel.add(jPanel2, java.awt.BorderLayout.NORTH);

        jSplitPane3.setRightComponent(outputPanel);

        jSplitPane1.setRightComponent(jSplitPane3);

        elsePanel.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jSplitPane4.setRightComponent(elsePanel);

        add(jSplitPane4, java.awt.BorderLayout.NORTH);

    }// </editor-fold>//GEN-END:initComponents
    
    private void describeButtonPushed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_describeButtonPushed
        int[] sel = paramTable.getSelectedColumns();
        for (int i = 0; i < sel.length; i++) {
            Parameter param = default_ps.getParameter(paramTable.getModel().getColumnName(paramTable.convertColumnIndexToModel(sel[i])));
            
            String foo = "Name: " + param.getName() + "\n" +
                    "Module: " + param.getModule() + "\n" +
                    "Description: " + param.getDesc() + "\n" +
                    "Dimension(s): " + param.getDimension(0) + "\n" +
                    "Default: " + param.getDefaultVal() + "\n" +                    
                    "Range: " + param.getLowBound() + " - "  + param.getUpBound() + "\n" +
                    "Units: " + param.getUnits() + "\n" +
                    "Type: " + param.getType();
            
            JOptionPane.showMessageDialog(GuiUtilities.windowFor(this), foo, "Parameter Description", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_describeButtonPushed
    
    private void dimListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dimListValueChanged
        setDimension((String) dimList.getSelectedValue());
    }//GEN-LAST:event_dimListValueChanged
    
    private void splitCallback(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_splitCallback
        if (gisPanel != null && theme != null) gisPanel.zoomTo(theme.getBounds());
    }//GEN-LAST:event_splitCallback
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton describeButton;
    private javax.swing.JList dimList;
    private javax.swing.JPanel elsePanel;
    private javax.swing.JScrollPane gisScrollPane;
    private javax.swing.JTable gisTable;
    private javax.swing.JPanel gisValsPanel;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel keyPanel;
    private javax.swing.JLabel outputDateLabel;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JScrollPane outputScrolllPane;
    private javax.swing.JTable outputTable;
    private javax.swing.JScrollPane paramScrollPane;
    private javax.swing.JTable paramTable;
    private javax.swing.JPanel paramValsPanel;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
    
    public void setDimension(String dimension) {
        this.dimension = dimension;
        
// DANGER everything in here is a hack
        
//draw the map
        if (theme != null) {
            gisPanel.removeTheme(theme);
            theme = null;
        }
        
        theme = loadTheme();
        
        //hack
        if (theme == null) return;
        
        gisPanel.addTheme(theme);
        gisPanel.setThemeVisible(theme, true);
        gisPanel.setActiveTheme(theme);
        
//  load the gis table
        AbstractTableModel gis_table_model = new AttributeModelParameterEditorAdapter(gis_attribute_model);
        gisTable.setModel(gis_table_model);
        
// load parameter and dimension values
        setColumnWidth(gisTable, 100);
        MmsParamsReader mp;
        try {
            mp = new MmsParamsReader(data.getParameterFilePathForDim(dimension));
            ParameterSet ps = mp.read();
            AbstractTableModel param_table_model = new ParamToolTableModel(ps, dimension);
            paramTable.setModel(param_table_model);
            
            initRowHeaders(paramTable);
            generateRowHeaders(paramTable, paramScrollPane);
            setColumnWidth(paramTable, 100);
            
//            String[] paramToolTipsText = new String[paramTable.getColumnCount()];
//
//            TTHeader tth = new TTHeader(paramTable.getColumnModel());
//            for (int i = 0; i < paramTable.getColumnCount(); i++) {
//                paramToolTipsText[i] = new String("Description " + i);
//            }
//            tth.setToolTipsText(paramToolTipsText);
//            tth.setToolTipText("No description available");
//            paramTable.setTableHeader(tth);
            
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
// load the output data
        
        SpaceTimeSeriesData stsd = new SpaceTimeSeriesData(data.getGisOutPathForDim(dimension));
        AbstractTableModel output_table_model = new SpaceTimeSeriesDataTableModelAdapter(stsd);
        outputTable.setModel(output_table_model);
        setColumnWidth(outputTable, 100);
        
        try {
            
//  load the default parameter values, ranges, descriptions, etc.
            
            MmsDefaultParamsReader mdpr = new MmsDefaultParamsReader(data.getiParamDefaultPathForDim(dimension));
            default_ps = mdpr.read();
            
        } catch (IOException ex) {
            ex.printStackTrace();
        }

//        VectorColorModel vcm = gisPanel.getColorModel((VectorTheme)theme);
//
//        for (int i = 0; i < ((VectorTheme)theme).getFeatureCount(); i++) {
////System.out.println(" fill_color_name = " + fill_color_name + " foo = " + OuiColors.getFillColor(fill_color_name));
//            vcm.setFillPaint(OuiColors.getFillColor ("clear"), i);
//            vcm.setBorderPaint(OuiColors.getBorderColor("black"), i);
//        }
//
//        gisPanel.tVrepaint();
    }
    
    public String getDimension() {return dimension;}
    
    //  Copied from oui.treetypes.OuiShapeTreeNode
    public Theme loadTheme() {
        VectorTheme vt = null;
        VectorModel vectorModel;
        
        // hack
        
        if (data.getThemePathForDim(dimension) == null) return null;
        
        try {
            ShpFileParser sfp = new ShpFileParser(data.getThemePathForDim(dimension) + ".shp");
            vectorModel = sfp.createModel();
            
            OuiDbfFileParser dfp = new OuiDbfFileParser(data.getThemePathForDim(dimension) + ".dbf");
            gis_attribute_model = dfp.createModel();
            vt = new VectorTheme(vectorModel, gis_attribute_model);
            
/*
 **  Figure out the label_index.  The label_attribute comes from the tree file.
 **  Use this to look up the column index.
 */
//            if (label_attribute.equals("")) {
//                label_index = 0;
//            } else {
//                label_index = attribute_model.getAttributeIndex(label_attribute);
//            }
            
        } catch (FileNotFoundException e1) {
            System.err.println(e1);
        } catch (Exception e2) {
            System.err.println(e2);
        }
        return ((Theme)vt);
    }
    
    private void setKey() {
        jLabel1.setBackground(new Color(0, 255, 255));
        jLabel2.setBackground(new Color(13, 255, 255));
        jLabel3.setBackground(new Color(26, 242, 242));
        jLabel4.setBackground(new Color(39, 229, 229));
        jLabel5.setBackground(new Color(51, 216, 216));
        jLabel6.setBackground(new Color(64, 193, 193));
        jLabel7.setBackground(new Color(77, 180, 180));
        jLabel8.setBackground(new Color(90, 167, 167));
        jLabel9.setBackground(new Color(102, 154, 154));
        jLabel10.setBackground(new Color(128, 141, 141));
        jLabel11.setBackground(new Color(141, 128, 128));
        jLabel12.setBackground(new Color(154, 102, 102));
        jLabel13.setBackground(new Color(167, 90, 90));
        jLabel14.setBackground(new Color(180, 77, 77));
        jLabel15.setBackground(new Color(193, 64, 64));
        jLabel16.setBackground(new Color(216, 51, 51));
        jLabel17.setBackground(new Color(229, 39, 39));
        jLabel18.setBackground(new Color(242, 26, 26));
        jLabel19.setBackground(new Color(255, 13, 13));
        jLabel20.setBackground(new Color(255, 0, 0));
    }
    
    // This is copied from oui.paramtool.ParamToolGui
    
    private FontMetrics metrics;
    private Insets      insets;
    private Font  aFont;
    private Color aBackground;
    private Color aForeground;
    private Border border;
    private TableSorter sorter = null;
    
    private void initRowHeaders(JTable jtable) {
        // Create a row-header to display row numbers.
        // This row-header is made of labels whose Borders,
        // Foregrounds, Backgrounds, and Fonts must be
        // the one used for the table column headers.
        // Also ensure that the row-header labels and the table
        // rows have the same height.
        TableColumn       aColumn   = jtable.getColumnModel().getColumn(0);
        TableCellRenderer aRenderer = jtable.getTableHeader().getDefaultRenderer();
        if (aRenderer==null) {
            System.out.println(" Aouch !");
            aColumn   = jtable.getColumnModel().getColumn(0);
            aRenderer = aColumn.getHeaderRenderer();
            if (aRenderer==null) {
                System.out.println(" Aouch Aouch !");
                //                System.exit(3);
//                exitForm(null);
            }
        }
        Component aComponent = aRenderer.getTableCellRendererComponent(jtable, aColumn.getHeaderValue(), false, false, -1, 0);
        aFont       = aComponent.getFont();
        aBackground = aComponent.getBackground();
        aForeground = aComponent.getForeground();
        
        border  = (Border)UIManager.getDefaults().get("TableHeader.cellBorder");
        insets  = border.getBorderInsets(jtable.getTableHeader());
        metrics = jtable.getFontMetrics(aFont);
    }
    
    // This is copied from oui.paramtool.ParamToolGui
    private void generateRowHeaders(JTable jtable, JScrollPane tableScrollPane) {
        
        /*
         * Creating a panel to be used as the row header.
         *
         * Since I'm not using any LayoutManager,
         * a call to setPreferredSize().
         */
        JPanel pnl = new JPanel((LayoutManager)null);
        
        Dimension dim;
//        Object selection = null;
//        if (dimTree.getSelectionCount() > 0) {
//            selection = dimTree.getSelectionPath().getLastPathComponent();
//        }
        
//        if (selection == ParamToolTreeModel.dimensionSizes) {
//            dim = new Dimension( metrics.stringWidth("999999999999999")+insets.right+insets.left, jtable.getRowHeight()*jtable.getRowCount());
//        } else {
        dim = new Dimension( metrics.stringWidth("999")+insets.right+insets.left, jtable.getRowHeight()*jtable.getRowCount());
//        }
        
        pnl.setPreferredSize(dim);
        
        // Adding the row header labels
        dim.height = jtable.getRowHeight();
        
        for (int i=0; i<jtable.getRowCount(); i++) {
            int ii;
            if (sorter != null) {
                ii = sorter.modelIndex(i);
            } else {
                ii = i;
            }
            
            JButton lbl;
//            if (selection == ParamToolTreeModel.dimensionSizes) {
//                oui.datatypes.Dimension[] dims = mms_params.getDimensionArray();
//                MmsDimension mms_dim = (MmsDimension)(dims[ii]);
//                lbl = new JButton(mms_dim.getName());
//            } else {
            lbl = new JButton(Integer.toString(ii+1));
//            }
            
            
            lbl.setFont(aFont);
            lbl.setBackground(aBackground);
            lbl.setForeground(aForeground);
            lbl.setBorder(border);
            lbl.setBounds(0, i*dim.height, dim.width, dim.height);
            pnl.add(lbl);
        }
        
        JViewport vp = new JViewport();
        dim.height = jtable.getRowHeight()*jtable.getRowCount();
        vp.setViewSize(dim);
        vp.setView(pnl);
        tableScrollPane.setRowHeader(vp);
        
//        tableScrollPane.setCorner(JScrollPane.UPPER_LEFT_CORNER, new JLabel());
//        tableScrollPane.setCorner(JScrollPane.LOWER_LEFT_CORNER, new JLabel());
//        tableScrollPane.setCorner(JScrollPane.UPPER_RIGHT_CORNER, new JLabel());
        
    }
    
    private void setColumnWidth(JTable jtable, int width) {
        jtable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        for (int i = 0; i < jtable.getColumnCount(); i++) {
            TableColumn col = jtable.getColumnModel().getColumn(i);
            col.setPreferredWidth(width);
        }
    }
    
//    class TTHeader extends JTableHeader {
//        // The following String array holds all ToolTip text, with one entry
//        // for each table column. If a column is to display default ToolTip
//        // text, the corresponding entry is "".
//
//        private String [] allToolTipsText;
//
//        TTHeader(TableColumnModel tcm) {
//            // Pass the TableColumnModel object to the superclass, which
//            // takes care of that object.
//
//            super(tcm);
//
//        }
//
//        // The following method is automatically called when the mouse
//        // cursor hotspot moves over any one of the header rectangles in a
//        // table header.
//
//        public String getToolTipText(MouseEvent e) {
//            // Return the pixel position of the mouse cursor hotspot.
//
//            Point p = e.getPoint();
//
//            // Convert the pixel position to the zero-based column index of
//            // the table header column over which the mouse cursor hotspot is
//            // located. The result is a view-based column index.
//
//            int viewColumnIndex = columnAtPoint(p);
//
//            // Retrieve a reference to the JTable object associated with the
//            // table header.
//
//            JTable jt = getTable();
//
//            // Convert the view-based column index to a model-based column
//            // index.
//
//            int modelColumnIndex =
//                    jt.convertColumnIndexToModel(viewColumnIndex);
//
//            // If model's ToolTip text is not present in allToolTipsText,
//            // that means the default ToolTip text should be returned.
//            // Otherwise, return the actual ToolTip text.
//
//            if (allToolTipsText [modelColumnIndex].length() == 0)
//                return super.getToolTipText(e);
//            else
//                return allToolTipsText [modelColumnIndex];
//        }
//
//        void setToolTipsText(String [] myToolTipsText) {
//            // Save the ToolTips text array for use by getToolTipText().
//
//            allToolTipsText = myToolTipsText;
//        }
//    }
    
}
