/*
 * ParamMapGui.java
 *
 * Created on June 5, 2012, 10:57 AM
 */

package oui.mapper.paramMap;

import gov.usgs.cawsc.gui.WindowFactory;
import java.util.Iterator;
import java.util.TreeSet;
import javax.swing.JPanel;
import org.omscentral.gis.model.AttributeModel;
import org.omscentral.gis.model.VectorTheme;
import org.omscentral.gis.ui.panel.GISPanel;
import org.omscentral.gis.ui.panel.AbstractVectorThemeColorModel;
import org.omscentral.gis.ui.panel.VectorLayer;
import oui.mapper.ColorRange;
import oui.mapper.KeyPanel;
import oui.mapper.MapperKeyInterface;
import oui.mms.datatypes.Dimension;
import oui.mms.datatypes.Parameter;
import oui.mms.datatypes.ParameterSet;

/**
 *
 * @author  markstro
 */
public class ParamMapGui extends JPanel implements MapperKeyInterface {
    private ColorRange colorRange = null;
    private final GISPanel gisPanel;
    private final VectorTheme theme;
    private final String idAttributeName;
    private int numBins;
    private double min, max;
    private ParameterSet ps;
    private TreeSet<Parameter> paramTree;
    private int maxHru;

    public ParamMapGui(ParameterSet ps, String dimensionName, GISPanel gisPanel,
            VectorTheme theme, String idAttributeName, int numBins, int maxHru) {

        this.ps = ps;
        this.gisPanel = gisPanel;
        this.theme = theme;
        this.idAttributeName = idAttributeName;
        this.numBins = numBins;
        this.maxHru = maxHru;

        Dimension dim = ps.getDimension(dimensionName);
        paramTree = (TreeSet<Parameter>) ps.get1DParamsForDim(dim);

        initComponents();
        setComboBox();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        showKeyBox = new javax.swing.JCheckBox();
        jComboBox1 = new javax.swing.JComboBox();

        showKeyBox.setText("Show Key");
        showKeyBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showKeyBoxActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose Parameter"));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, 0, 180, Short.MAX_VALUE)
                .addGap(8, 8, 8)
                .addComponent(showKeyBox)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showKeyBox)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm

    }//GEN-LAST:event_exitForm

    private KeyPanel kf = null;
    private void showKeyBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showKeyBoxActionPerformed
        if (showKeyBox.isSelected()) {
            kf = new KeyPanel(numBins, min, max, (MapperKeyInterface)this);
            WindowFactory.displayInFrame(kf, "Key");
        } else {
            WindowFactory.instance().closeWindow(kf);
        }
    }//GEN-LAST:event_showKeyBoxActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        setShowKeyBoxSelection(false);
        currentParam = (Parameter) jComboBox1.getSelectedItem();
        getComboBoxSelection();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private AbstractVectorThemeColorModel vcm = null;
    private int[] hruMapping = null;
    private Parameter currentParam = null;

    private void setMapData(Parameter param) {
        this.currentParam = param;

        if (vcm == null) {
            vcm = ((VectorLayer) (gisPanel.getThemeView().getLayerOf(theme))).getColorModel();

            // Figure out the spatial mapping
            AttributeModel mod = theme.getAttributeModel();
            int idAttributeIndex = theme.getIdIndex(idAttributeName);

            if (idAttributeIndex == -1) {
                System.out.println ("HRU mapping attribute " + idAttributeName + " not found in not found in shapefile.");
                System.exit(1);
            }

            try {
                hruMapping = new int[mod.getRecordCount()];
                for (int i = 0; i < mod.getRecordCount(); i++) {
                    int hru_index = Integer.parseInt((mod.getAttribute(i, idAttributeIndex)).toString());
                    if (hru_index <= 0) {
                        System.out.println("there are HRUs with ID less than or equal to 0, ignoring these");
                    } else if (maxHru > 0 && hru_index > maxHru) {
                        System.out.println("there are HRUs with ID greater than nhru, ignoring these");
                    } else {
                        hruMapping[i] = hru_index - 1;
                    }
                }
            } catch (NumberFormatException e) {
                System.out.println ("NumberFormatException when reading HRU mapping attribute " + idAttributeName );
                System.out.println (e.getMessage());
            }
        }

        double[] vals;
        if (param.getType() == Double.class) {
            vals = (double[]) param.getVals();
            
        } else if (param.getType() == Float.class) {
            vals = new double[param.getSize()];
            for (int i = 0; i < param.getSize(); i++) {
                float[] float_vals = (float[]) param.getVals();
                vals[i] = (float) float_vals[i];
            }
        } else if (param.getType() == Integer.class) {
            vals = new double[param.getSize()];
            for (int i = 0; i < param.getSize(); i ++) {
                int[] int_vals = (int[]) param.getVals();
                vals[i] = (double) int_vals[i];
            }
        } else {
            // This is for types other than ints or doubles. Will probably fail anyway.
            vals = new double[param.getSize()];
            for (int i = 0; i < param.getSize(); i ++) {
                Object[] str_vals = (Object [])param.getVals();
                vals[i] = Double.parseDouble(str_vals[i].toString());
            }
        }

        for (int i = 0; i < (theme).getFeatureCount(); i++) {
            vcm.setFillPaint(colorRange.getColorForValue(vals[hruMapping[i]]), i);
        }
        gisPanel.getThemeView().repaint();
    }

    public AbstractVectorThemeColorModel getColorModel (VectorTheme theme) {
        return ((VectorLayer)(gisPanel.getThemeView().getLayerOf(theme))).getColorModel();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox showKeyBox;
    // End of variables declaration//GEN-END:variables

    // This is called by KeyFrame when bin values change.
    // The data values didn't change, just the colorRange
    @Override
    public void keyChanged(ColorRange cr) {
        this.colorRange = cr;
        setMapData(currentParam);
    }

    @Override
    public void setShowKeyBoxSelection(boolean b) {
        showKeyBox.setSelected(b);
    }

    private void getComboBoxSelection() {
        if (currentParam != null) {
            this.min = currentParam.getMin();
            this.max = currentParam.getMax();
            this.colorRange = new ColorRange(numBins, min, max);
            setMapData(currentParam);
        }
    }

    private void setComboBox() {
        jComboBox1.removeAllItems();

        Iterator<Parameter> it = paramTree.iterator();
        while (it.hasNext()) {
            jComboBox1.addItem(it.next());
        }

        currentParam = (Parameter) jComboBox1.getItemAt(0);
    }
}
