/*
 * An3dGui.java
 *
 * Created on July 6, 2005, 10:57 AM
 */

package oui.mapper.variableMap;

import gov.usgs.cawsc.gui.WindowFactory;
import java.text.DateFormat;
import java.util.GregorianCalendar;
import java.util.Hashtable;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.omscentral.gis.model.AttributeModel;
import org.omscentral.gis.model.VectorTheme;
import org.omscentral.gis.ui.panel.GISPanel;
import org.omscentral.gis.ui.panel.AbstractVectorThemeColorModel;
import org.omscentral.gis.ui.panel.VectorLayer;
import oui.mapper.ColorRange;
import oui.mapper.KeyPanel;
import oui.mapper.MapperKeyInterface;
import oui.mms.datatypes.SpaceTimeSeriesData;

/**
 *
 * @author  markstro
 */
public class VariableMapGui extends JPanel implements MapperKeyInterface {
    private DateFormat date_format = DateFormat.getDateInstance(DateFormat.MEDIUM);
    private GregorianCalendar slider_time = new GregorianCalendar();
    private ColorRange colorRange = null;
    private final SpaceTimeSeriesData tsd;
    private final GISPanel gisPanel;
    private final VectorTheme theme;
    private final String idAttributeName;
    private int numBins;
    private int maxHru;
    private double min, max;

    public VariableMapGui(SpaceTimeSeriesData tsd, GISPanel gisPanel,
            VectorTheme theme, String idAttributeName, String dispVarName,
            int numBins, int maxHru) {
        this.tsd = tsd;
        this.gisPanel = gisPanel;
        this.theme = theme;
        this.idAttributeName = idAttributeName;
        this.numBins = numBins;
        this.maxHru = maxHru;

        tsd.setTimeStep(0);
        currentVals = tsd.getCurrentData();

        tsd.setVariableIndex(tsd.getVariableIndex(dispVarName));
        this.min = tsd.getVariableMinValue();
        this.max = tsd.getVariableMaxValue();
        this.colorRange = new ColorRange(numBins, min, max);
        initComponents();
        setSliders();

        // Set to the first time step

        setTimeWidgets(tsd);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        dateSlider = new javax.swing.JSlider();
        dateTextField = new javax.swing.JTextField();
        showKeyBox = new javax.swing.JCheckBox();

        dateSlider.setMajorTickSpacing(25);
        dateSlider.setMinorTickSpacing(10);
        dateSlider.setPaintLabels(true);
        dateSlider.setPaintTicks(true);
        dateSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Map Date"));

        dateTextField.setText("Jan 1, 1900");
        dateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateTextFieldActionPerformed(evt);
            }
        });

        showKeyBox.setText("Show Key");
        showKeyBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showKeyBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dateSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showKeyBox)
                    .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(showKeyBox))
                    .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setDateLabel(String val) {
        dateTextField.setText(val);
    }

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm

    }//GEN-LAST:event_exitForm

    private void dateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateTextFieldActionPerformed

    private KeyPanel kf = null;
    private void showKeyBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showKeyBoxActionPerformed
        if (showKeyBox.isSelected()) {
            kf = new KeyPanel(numBins, min, max, (MapperKeyInterface)this);
            WindowFactory.displayInFrame(kf, "Key");
        } else {
            WindowFactory.instance().closeWindow(kf);
        }

    }//GEN-LAST:event_showKeyBoxActionPerformed

    public final void setTimeWidgets(SpaceTimeSeriesData tsd) {
        setDateLabel(date_format.format((tsd.getCurrentTime()).getTime()));
        dateSlider.setValue(tsd.getTimeStep());
    }

    private void setSliders() {
        int timeCount = tsd.getTimeCount();
        dateSlider.setMaximum(timeCount);
        dateSlider.setMinimum(1);
        dateSlider.setValue(1);
        dateSlider.setMinorTickSpacing(15);
        dateSlider.setMajorTickSpacing(30);

        Hashtable<Integer,JLabel> labeltable = new Hashtable<Integer,JLabel>();
        labeltable.put(new Integer(1), new JLabel(date_format.format(tsd.getStartTime().getTime()) ) );

        slider_time.setTime(tsd.getStartTime().getTime());
        slider_time.add(GregorianCalendar.DATE, tsd.getTimeCount() / 2);
        labeltable.put(new Integer(tsd.getTimeCount() / 2), new JLabel(date_format.format(slider_time.getTime())));
        labeltable.put(new Integer(tsd.getTimeCount()), new JLabel(date_format.format(tsd.getEndTime().getTime())));

        dateSlider.setLabelTable(labeltable);
        dateSlider.setPaintLabels(true);
        dateSlider.setPaintTicks(true);

        dateSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                JSlider tempSlider = (JSlider)e.getSource();
                slider_time.setTime(tsd.getStartTime().getTime());
                slider_time.add(GregorianCalendar.DATE, tempSlider.getValue() - 1);
                setDateLabel(date_format.format(slider_time.getTime()));

                if (!(tempSlider.getValueIsAdjusting())) {
                    tsd.setTimeStep(tempSlider.getValue() - 1);
                    setMapData(tsd.getCurrentData());
                }
            }
        });
    }

    private AbstractVectorThemeColorModel vcm = null;
    private int[] hruMapping = null;
    private double[] currentVals = null;

    private void setMapData(double[] vals) {
        this.currentVals = vals;

        if (vcm == null) {
            vcm = ((VectorLayer) (gisPanel.getThemeView().getLayerOf(theme))).getColorModel();

            // Figure out the spatial mapping
            AttributeModel mod = theme.getAttributeModel();
            int idAttributeIndex = theme.getIdIndex(idAttributeName);
//            for (int i = 0; i < mod.getAttributeCount(); i++) {
//                if (mod.getAttributeName(i).equals(idAttributeName)) {
//                    idAttributeIndex = i;
//                    break;
//                }
//            }

            if (idAttributeIndex == -1) {
                System.out.println("HRU mapping attribute " + idAttributeName + " not found in not found in shapefile.");
                System.exit(1);
            }

            try {
                hruMapping = new int[mod.getRecordCount()];
                for (int i = 0; i < mod.getRecordCount(); i++) {
                    int hru_index = Integer.parseInt((mod.getAttribute(i, idAttributeIndex)).toString());
                    if (hru_index <= 0) {
                        System.out.println("there are HRUs with ID less than or equal to 0, ignoring these");
                    } else if (maxHru > 0 && hru_index > maxHru) {
                        System.out.println("there are HRUs with ID greater than nhru, ignoring these");
                    } else {
                        hruMapping[i] = hru_index - 1;
                    }
                }
            } catch (NumberFormatException e) {
                System.out.println("NumberFormatException when reading HRU mapping attribute " + idAttributeName);
                System.out.println(e.getMessage());
            }
        }

        for (int i = 0; i < (theme).getFeatureCount(); i++) {
            vcm.setFillPaint(colorRange.getColorForValue(vals[hruMapping[i]]), i);
        }
        gisPanel.getThemeView().repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider dateSlider;
    private javax.swing.JTextField dateTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox showKeyBox;
    // End of variables declaration//GEN-END:variables

    // This is called by KeyFrame when bin values change.
    // The data values didn't change, just the colorRange
    @Override
    public void keyChanged(ColorRange cr) {
        this.colorRange = cr;
        setMapData(currentVals);
    }

    @Override
    public void setShowKeyBoxSelection(boolean b) {
        showKeyBox.setSelected(b);
    }

}